ARM GAS  /tmp/ccJ9ZBRW.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"rng.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/rng.c"
  20              		.section	.text.MX_RNG_Init,"ax",%progbits
  21              		.align	1
  22              		.global	MX_RNG_Init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	MX_RNG_Init:
  28              	.LFB141:
   1:Core/Src/rng.c **** /* USER CODE BEGIN Header */
   2:Core/Src/rng.c **** /**
   3:Core/Src/rng.c ****   ******************************************************************************
   4:Core/Src/rng.c ****   * @file    rng.c
   5:Core/Src/rng.c ****   * @brief   This file provides code for the configuration
   6:Core/Src/rng.c ****   *          of the RNG instances.
   7:Core/Src/rng.c ****   ******************************************************************************
   8:Core/Src/rng.c ****   * @attention
   9:Core/Src/rng.c ****   *
  10:Core/Src/rng.c ****   * Copyright (c) 2023 STMicroelectronics.
  11:Core/Src/rng.c ****   * All rights reserved.
  12:Core/Src/rng.c ****   *
  13:Core/Src/rng.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/rng.c ****   * in the root directory of this software component.
  15:Core/Src/rng.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/rng.c ****   *
  17:Core/Src/rng.c ****   ******************************************************************************
  18:Core/Src/rng.c ****   */
  19:Core/Src/rng.c **** /* USER CODE END Header */
  20:Core/Src/rng.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/rng.c **** #include "rng.h"
  22:Core/Src/rng.c **** 
  23:Core/Src/rng.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/rng.c **** 
  25:Core/Src/rng.c **** /* USER CODE END 0 */
  26:Core/Src/rng.c **** 
  27:Core/Src/rng.c **** RNG_HandleTypeDef hrng;
  28:Core/Src/rng.c **** 
  29:Core/Src/rng.c **** /* RNG init function */
  30:Core/Src/rng.c **** void MX_RNG_Init(void)
ARM GAS  /tmp/ccJ9ZBRW.s 			page 2


  31:Core/Src/rng.c **** {
  29              		.loc 1 31 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  32:Core/Src/rng.c **** 
  33:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_Init 0 */
  34:Core/Src/rng.c **** 
  35:Core/Src/rng.c ****   /* USER CODE END RNG_Init 0 */
  36:Core/Src/rng.c **** 
  37:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_Init 1 */
  38:Core/Src/rng.c **** 
  39:Core/Src/rng.c ****   /* USER CODE END RNG_Init 1 */
  40:Core/Src/rng.c ****   hrng.Instance = RNG;
  37              		.loc 1 40 3 view .LVU1
  38              		.loc 1 40 17 is_stmt 0 view .LVU2
  39 0002 0548     		ldr	r0, .L5
  40 0004 054B     		ldr	r3, .L5+4
  41 0006 0360     		str	r3, [r0]
  41:Core/Src/rng.c ****   if (HAL_RNG_Init(&hrng) != HAL_OK)
  42              		.loc 1 41 3 is_stmt 1 view .LVU3
  43              		.loc 1 41 7 is_stmt 0 view .LVU4
  44 0008 FFF7FEFF 		bl	HAL_RNG_Init
  45              	.LVL0:
  46              		.loc 1 41 6 view .LVU5
  47 000c 00B9     		cbnz	r0, .L4
  48              	.L1:
  42:Core/Src/rng.c ****   {
  43:Core/Src/rng.c ****     Error_Handler();
  44:Core/Src/rng.c ****   }
  45:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_Init 2 */
  46:Core/Src/rng.c **** 
  47:Core/Src/rng.c ****   /* USER CODE END RNG_Init 2 */
  48:Core/Src/rng.c **** 
  49:Core/Src/rng.c **** }
  49              		.loc 1 49 1 view .LVU6
  50 000e 08BD     		pop	{r3, pc}
  51              	.L4:
  43:Core/Src/rng.c ****   }
  52              		.loc 1 43 5 is_stmt 1 view .LVU7
  53 0010 FFF7FEFF 		bl	Error_Handler
  54              	.LVL1:
  55              		.loc 1 49 1 is_stmt 0 view .LVU8
  56 0014 FBE7     		b	.L1
  57              	.L6:
  58 0016 00BF     		.align	2
  59              	.L5:
  60 0018 00000000 		.word	hrng
  61 001c 00080650 		.word	1342572544
  62              		.cfi_endproc
  63              	.LFE141:
  65              		.section	.text.HAL_RNG_MspInit,"ax",%progbits
  66              		.align	1
ARM GAS  /tmp/ccJ9ZBRW.s 			page 3


  67              		.global	HAL_RNG_MspInit
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  72              	HAL_RNG_MspInit:
  73              	.LVL2:
  74              	.LFB142:
  50:Core/Src/rng.c **** 
  51:Core/Src/rng.c **** void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
  52:Core/Src/rng.c **** {
  75              		.loc 1 52 1 is_stmt 1 view -0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 136
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		.loc 1 52 1 is_stmt 0 view .LVU10
  80 0000 10B5     		push	{r4, lr}
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 4, -8
  83              		.cfi_offset 14, -4
  84 0002 A2B0     		sub	sp, sp, #136
  85              		.cfi_def_cfa_offset 144
  86 0004 0446     		mov	r4, r0
  53:Core/Src/rng.c **** 
  54:Core/Src/rng.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  87              		.loc 1 54 3 is_stmt 1 view .LVU11
  88              		.loc 1 54 28 is_stmt 0 view .LVU12
  89 0006 8022     		movs	r2, #128
  90 0008 0021     		movs	r1, #0
  91 000a 02A8     		add	r0, sp, #8
  92              	.LVL3:
  93              		.loc 1 54 28 view .LVU13
  94 000c FFF7FEFF 		bl	memset
  95              	.LVL4:
  55:Core/Src/rng.c ****   if(rngHandle->Instance==RNG)
  96              		.loc 1 55 3 is_stmt 1 view .LVU14
  97              		.loc 1 55 15 is_stmt 0 view .LVU15
  98 0010 2268     		ldr	r2, [r4]
  99              		.loc 1 55 5 view .LVU16
 100 0012 0D4B     		ldr	r3, .L13
 101 0014 9A42     		cmp	r2, r3
 102 0016 01D0     		beq	.L11
 103              	.L7:
  56:Core/Src/rng.c ****   {
  57:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_MspInit 0 */
  58:Core/Src/rng.c **** 
  59:Core/Src/rng.c ****   /* USER CODE END RNG_MspInit 0 */
  60:Core/Src/rng.c **** 
  61:Core/Src/rng.c ****   /** Initializes the peripherals clock
  62:Core/Src/rng.c ****   */
  63:Core/Src/rng.c ****     PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
  64:Core/Src/rng.c ****     PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  65:Core/Src/rng.c ****     if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  66:Core/Src/rng.c ****     {
  67:Core/Src/rng.c ****       Error_Handler();
  68:Core/Src/rng.c ****     }
  69:Core/Src/rng.c **** 
  70:Core/Src/rng.c ****     /* RNG clock enable */
ARM GAS  /tmp/ccJ9ZBRW.s 			page 4


  71:Core/Src/rng.c ****     __HAL_RCC_RNG_CLK_ENABLE();
  72:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_MspInit 1 */
  73:Core/Src/rng.c **** 
  74:Core/Src/rng.c ****   /* USER CODE END RNG_MspInit 1 */
  75:Core/Src/rng.c ****   }
  76:Core/Src/rng.c **** }
 104              		.loc 1 76 1 view .LVU17
 105 0018 22B0     		add	sp, sp, #136
 106              		.cfi_remember_state
 107              		.cfi_def_cfa_offset 8
 108              		@ sp needed
 109 001a 10BD     		pop	{r4, pc}
 110              	.LVL5:
 111              	.L11:
 112              		.cfi_restore_state
  63:Core/Src/rng.c ****     PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 113              		.loc 1 63 5 is_stmt 1 view .LVU18
  63:Core/Src/rng.c ****     PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 114              		.loc 1 63 46 is_stmt 0 view .LVU19
 115 001c 4FF40013 		mov	r3, #2097152
 116 0020 0293     		str	r3, [sp, #8]
  64:Core/Src/rng.c ****     if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 117              		.loc 1 64 5 is_stmt 1 view .LVU20
  65:Core/Src/rng.c ****     {
 118              		.loc 1 65 5 view .LVU21
  65:Core/Src/rng.c ****     {
 119              		.loc 1 65 9 is_stmt 0 view .LVU22
 120 0022 02A8     		add	r0, sp, #8
 121 0024 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 122              	.LVL6:
  65:Core/Src/rng.c ****     {
 123              		.loc 1 65 8 view .LVU23
 124 0028 50B9     		cbnz	r0, .L12
 125              	.L9:
  71:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_MspInit 1 */
 126              		.loc 1 71 5 is_stmt 1 view .LVU24
 127              	.LBB2:
  71:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_MspInit 1 */
 128              		.loc 1 71 5 view .LVU25
  71:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_MspInit 1 */
 129              		.loc 1 71 5 view .LVU26
 130 002a 084B     		ldr	r3, .L13+4
 131 002c 5A6B     		ldr	r2, [r3, #52]
 132 002e 42F04002 		orr	r2, r2, #64
 133 0032 5A63     		str	r2, [r3, #52]
  71:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_MspInit 1 */
 134              		.loc 1 71 5 view .LVU27
 135 0034 5B6B     		ldr	r3, [r3, #52]
 136 0036 03F04003 		and	r3, r3, #64
 137 003a 0193     		str	r3, [sp, #4]
  71:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_MspInit 1 */
 138              		.loc 1 71 5 view .LVU28
 139 003c 019B     		ldr	r3, [sp, #4]
 140              	.LBE2:
  71:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_MspInit 1 */
 141              		.loc 1 71 5 view .LVU29
 142              		.loc 1 76 1 is_stmt 0 view .LVU30
ARM GAS  /tmp/ccJ9ZBRW.s 			page 5


 143 003e EBE7     		b	.L7
 144              	.L12:
  67:Core/Src/rng.c ****     }
 145              		.loc 1 67 7 is_stmt 1 view .LVU31
 146 0040 FFF7FEFF 		bl	Error_Handler
 147              	.LVL7:
 148 0044 F1E7     		b	.L9
 149              	.L14:
 150 0046 00BF     		.align	2
 151              	.L13:
 152 0048 00080650 		.word	1342572544
 153 004c 00380240 		.word	1073887232
 154              		.cfi_endproc
 155              	.LFE142:
 157              		.section	.text.HAL_RNG_MspDeInit,"ax",%progbits
 158              		.align	1
 159              		.global	HAL_RNG_MspDeInit
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 164              	HAL_RNG_MspDeInit:
 165              	.LVL8:
 166              	.LFB143:
  77:Core/Src/rng.c **** 
  78:Core/Src/rng.c **** void HAL_RNG_MspDeInit(RNG_HandleTypeDef* rngHandle)
  79:Core/Src/rng.c **** {
 167              		.loc 1 79 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
  80:Core/Src/rng.c **** 
  81:Core/Src/rng.c ****   if(rngHandle->Instance==RNG)
 172              		.loc 1 81 3 view .LVU33
 173              		.loc 1 81 15 is_stmt 0 view .LVU34
 174 0000 0268     		ldr	r2, [r0]
 175              		.loc 1 81 5 view .LVU35
 176 0002 054B     		ldr	r3, .L18
 177 0004 9A42     		cmp	r2, r3
 178 0006 00D0     		beq	.L17
 179              	.L15:
  82:Core/Src/rng.c ****   {
  83:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_MspDeInit 0 */
  84:Core/Src/rng.c **** 
  85:Core/Src/rng.c ****   /* USER CODE END RNG_MspDeInit 0 */
  86:Core/Src/rng.c ****     /* Peripheral clock disable */
  87:Core/Src/rng.c ****     __HAL_RCC_RNG_CLK_DISABLE();
  88:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_MspDeInit 1 */
  89:Core/Src/rng.c **** 
  90:Core/Src/rng.c ****   /* USER CODE END RNG_MspDeInit 1 */
  91:Core/Src/rng.c ****   }
  92:Core/Src/rng.c **** }
 180              		.loc 1 92 1 view .LVU36
 181 0008 7047     		bx	lr
 182              	.L17:
  87:Core/Src/rng.c ****   /* USER CODE BEGIN RNG_MspDeInit 1 */
 183              		.loc 1 87 5 is_stmt 1 view .LVU37
ARM GAS  /tmp/ccJ9ZBRW.s 			page 6


 184 000a 044A     		ldr	r2, .L18+4
 185 000c 536B     		ldr	r3, [r2, #52]
 186 000e 23F04003 		bic	r3, r3, #64
 187 0012 5363     		str	r3, [r2, #52]
 188              		.loc 1 92 1 is_stmt 0 view .LVU38
 189 0014 F8E7     		b	.L15
 190              	.L19:
 191 0016 00BF     		.align	2
 192              	.L18:
 193 0018 00080650 		.word	1342572544
 194 001c 00380240 		.word	1073887232
 195              		.cfi_endproc
 196              	.LFE143:
 198              		.global	hrng
 199              		.section	.bss.hrng,"aw",%nobits
 200              		.align	2
 203              	hrng:
 204 0000 00000000 		.space	16
 204      00000000 
 204      00000000 
 204      00000000 
 205              		.text
 206              	.Letext0:
 207              		.file 2 "/home/qrsnap/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-no
 208              		.file 3 "/home/qrsnap/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-no
 209              		.file 4 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f723xx.h"
 210              		.file 5 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 211              		.file 6 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 212              		.file 7 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rng.h"
 213              		.file 8 "Core/Inc/rng.h"
 214              		.file 9 "Core/Inc/main.h"
 215              		.file 10 "<built-in>"
ARM GAS  /tmp/ccJ9ZBRW.s 			page 7


DEFINED SYMBOLS
                            *ABS*:00000000 rng.c
     /tmp/ccJ9ZBRW.s:21     .text.MX_RNG_Init:00000000 $t
     /tmp/ccJ9ZBRW.s:27     .text.MX_RNG_Init:00000000 MX_RNG_Init
     /tmp/ccJ9ZBRW.s:60     .text.MX_RNG_Init:00000018 $d
     /tmp/ccJ9ZBRW.s:203    .bss.hrng:00000000 hrng
     /tmp/ccJ9ZBRW.s:66     .text.HAL_RNG_MspInit:00000000 $t
     /tmp/ccJ9ZBRW.s:72     .text.HAL_RNG_MspInit:00000000 HAL_RNG_MspInit
     /tmp/ccJ9ZBRW.s:152    .text.HAL_RNG_MspInit:00000048 $d
     /tmp/ccJ9ZBRW.s:158    .text.HAL_RNG_MspDeInit:00000000 $t
     /tmp/ccJ9ZBRW.s:164    .text.HAL_RNG_MspDeInit:00000000 HAL_RNG_MspDeInit
     /tmp/ccJ9ZBRW.s:193    .text.HAL_RNG_MspDeInit:00000018 $d
     /tmp/ccJ9ZBRW.s:200    .bss.hrng:00000000 $d

UNDEFINED SYMBOLS
HAL_RNG_Init
Error_Handler
memset
HAL_RCCEx_PeriphCLKConfig
