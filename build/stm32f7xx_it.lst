ARM GAS  /tmp/ccOozFap.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f7xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	1
  21              		.global	NMI_Handler
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB144:
  28              		.file 1 "Core/Src/stm32f7xx_it.c"
   1:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f7xx_it.c **** /**
   3:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f7xx_it.c ****   * @file    stm32f7xx_it.c
   5:Core/Src/stm32f7xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f7xx_it.c ****   * @attention
   8:Core/Src/stm32f7xx_it.c ****   *
   9:Core/Src/stm32f7xx_it.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/stm32f7xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f7xx_it.c ****   *
  12:Core/Src/stm32f7xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f7xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f7xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f7xx_it.c ****   *
  16:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f7xx_it.c ****   */
  18:Core/Src/stm32f7xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f7xx_it.c **** 
  20:Core/Src/stm32f7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f7xx_it.c **** #include "main.h"
  22:Core/Src/stm32f7xx_it.c **** #include "stm32f7xx_it.h"
  23:Core/Src/stm32f7xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32f7xx_it.c **** #include "nyan_os.h"
  26:Core/Src/stm32f7xx_it.c **** #include "nyan_leds.h"
  27:Core/Src/stm32f7xx_it.c **** /* USER CODE END Includes */
  28:Core/Src/stm32f7xx_it.c **** 
  29:Core/Src/stm32f7xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN TD */
ARM GAS  /tmp/ccOozFap.s 			page 2


  31:Core/Src/stm32f7xx_it.c **** 
  32:Core/Src/stm32f7xx_it.c **** /* USER CODE END TD */
  33:Core/Src/stm32f7xx_it.c **** 
  34:Core/Src/stm32f7xx_it.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PD */
  36:Core/Src/stm32f7xx_it.c **** 
  37:Core/Src/stm32f7xx_it.c **** /* USER CODE END PD */
  38:Core/Src/stm32f7xx_it.c **** 
  39:Core/Src/stm32f7xx_it.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PM */
  41:Core/Src/stm32f7xx_it.c **** 
  42:Core/Src/stm32f7xx_it.c **** /* USER CODE END PM */
  43:Core/Src/stm32f7xx_it.c **** 
  44:Core/Src/stm32f7xx_it.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PV */
  46:Core/Src/stm32f7xx_it.c **** 
  47:Core/Src/stm32f7xx_it.c **** /* USER CODE END PV */
  48:Core/Src/stm32f7xx_it.c **** 
  49:Core/Src/stm32f7xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  50:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PFP */
  51:Core/Src/stm32f7xx_it.c **** 
  52:Core/Src/stm32f7xx_it.c **** /* USER CODE END PFP */
  53:Core/Src/stm32f7xx_it.c **** 
  54:Core/Src/stm32f7xx_it.c **** /* Private user code ---------------------------------------------------------*/
  55:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN 0 */
  56:Core/Src/stm32f7xx_it.c **** 
  57:Core/Src/stm32f7xx_it.c **** /* USER CODE END 0 */
  58:Core/Src/stm32f7xx_it.c **** 
  59:Core/Src/stm32f7xx_it.c **** /* External variables --------------------------------------------------------*/
  60:Core/Src/stm32f7xx_it.c **** extern DMA_HandleTypeDef hdma_i2c1_rx;
  61:Core/Src/stm32f7xx_it.c **** extern DMA_HandleTypeDef hdma_i2c1_tx;
  62:Core/Src/stm32f7xx_it.c **** extern I2C_HandleTypeDef hi2c1;
  63:Core/Src/stm32f7xx_it.c **** extern DMA_HandleTypeDef hdma_spi2_rx;
  64:Core/Src/stm32f7xx_it.c **** extern DMA_HandleTypeDef hdma_spi2_tx;
  65:Core/Src/stm32f7xx_it.c **** extern SPI_HandleTypeDef hspi2;
  66:Core/Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim1;
  67:Core/Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim6;
  68:Core/Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim7;
  69:Core/Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim8;
  70:Core/Src/stm32f7xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_OTG_HS;
  71:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN EV */
  72:Core/Src/stm32f7xx_it.c **** extern NyanOS nos;
  73:Core/Src/stm32f7xx_it.c **** extern double system_status_led_angle;
  74:Core/Src/stm32f7xx_it.c **** /* USER CODE END EV */
  75:Core/Src/stm32f7xx_it.c **** 
  76:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
  77:Core/Src/stm32f7xx_it.c **** /*           Cortex-M7 Processor Interruption and Exception Handlers          */
  78:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
  79:Core/Src/stm32f7xx_it.c **** /**
  80:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Non maskable interrupt.
  81:Core/Src/stm32f7xx_it.c ****   */
  82:Core/Src/stm32f7xx_it.c **** void NMI_Handler(void)
  83:Core/Src/stm32f7xx_it.c **** {
  29              		.loc 1 83 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccOozFap.s 			page 3


  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  84:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  85:Core/Src/stm32f7xx_it.c **** 
  86:Core/Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  87:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  88:Core/Src/stm32f7xx_it.c ****   while (1)
  36              		.loc 1 88 3 discriminator 1 view .LVU1
  89:Core/Src/stm32f7xx_it.c ****   {
  90:Core/Src/stm32f7xx_it.c ****   }
  37              		.loc 1 90 3 discriminator 1 view .LVU2
  88:Core/Src/stm32f7xx_it.c ****   {
  38              		.loc 1 88 9 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE144:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  50              	HardFault_Handler:
  51              	.LFB145:
  91:Core/Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  92:Core/Src/stm32f7xx_it.c **** }
  93:Core/Src/stm32f7xx_it.c **** 
  94:Core/Src/stm32f7xx_it.c **** /**
  95:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Hard fault interrupt.
  96:Core/Src/stm32f7xx_it.c ****   */
  97:Core/Src/stm32f7xx_it.c **** void HardFault_Handler(void)
  98:Core/Src/stm32f7xx_it.c **** {
  52              		.loc 1 98 1 view -0
  53              		.cfi_startproc
  54              		@ Volatile: function does not return.
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57 0000 08B5     		push	{r3, lr}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 8
  60              		.cfi_offset 3, -8
  61              		.cfi_offset 14, -4
  62              	.L4:
  99:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 100:Core/Src/stm32f7xx_it.c **** 
 101:Core/Src/stm32f7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 102:Core/Src/stm32f7xx_it.c ****   while (1)
  63              		.loc 1 102 3 discriminator 1 view .LVU5
 103:Core/Src/stm32f7xx_it.c ****   {
 104:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 105:Core/Src/stm32f7xx_it.c ****     HAL_GPIO_WritePin(GPIOD, Nyan_Keys_LED0_Pin, GPIO_PIN_SET);
  64              		.loc 1 105 5 discriminator 1 view .LVU6
  65 0002 0D4C     		ldr	r4, .L6
  66 0004 0122     		movs	r2, #1
  67 0006 1146     		mov	r1, r2
  68 0008 2046     		mov	r0, r4
ARM GAS  /tmp/ccOozFap.s 			page 4


  69 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  70              	.LVL0:
 106:Core/Src/stm32f7xx_it.c ****     HAL_GPIO_WritePin(GPIOD, Nyan_Keys_LED1_Pin, GPIO_PIN_SET);
  71              		.loc 1 106 5 discriminator 1 view .LVU7
  72 000e 0122     		movs	r2, #1
  73 0010 0221     		movs	r1, #2
  74 0012 2046     		mov	r0, r4
  75 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
  76              	.LVL1:
 107:Core/Src/stm32f7xx_it.c ****     HAL_GPIO_WritePin(GPIOD, Nyan_Keys_LED2_Pin, GPIO_PIN_SET);
  77              		.loc 1 107 5 discriminator 1 view .LVU8
  78 0018 0122     		movs	r2, #1
  79 001a 0421     		movs	r1, #4
  80 001c 2046     		mov	r0, r4
  81 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
  82              	.LVL2:
 108:Core/Src/stm32f7xx_it.c ****     HAL_GPIO_WritePin(GPIOD, Nyan_Keys_LED3_Pin, GPIO_PIN_SET);
  83              		.loc 1 108 5 discriminator 1 view .LVU9
  84 0022 0122     		movs	r2, #1
  85 0024 0821     		movs	r1, #8
  86 0026 2046     		mov	r0, r4
  87 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
  88              	.LVL3:
 109:Core/Src/stm32f7xx_it.c ****     HAL_GPIO_WritePin(GPIOD, Nyan_Keys_LED4_Pin, GPIO_PIN_SET);
  89              		.loc 1 109 5 discriminator 1 view .LVU10
  90 002c 0122     		movs	r2, #1
  91 002e 1021     		movs	r1, #16
  92 0030 2046     		mov	r0, r4
  93 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL4:
 102:Core/Src/stm32f7xx_it.c ****   {
  95              		.loc 1 102 9 discriminator 1 view .LVU11
  96 0036 E4E7     		b	.L4
  97              	.L7:
  98              		.align	2
  99              	.L6:
 100 0038 000C0240 		.word	1073875968
 101              		.cfi_endproc
 102              	.LFE145:
 104              		.section	.text.MemManage_Handler,"ax",%progbits
 105              		.align	1
 106              		.global	MemManage_Handler
 107              		.syntax unified
 108              		.thumb
 109              		.thumb_func
 111              	MemManage_Handler:
 112              	.LFB146:
 110:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 111:Core/Src/stm32f7xx_it.c ****   }
 112:Core/Src/stm32f7xx_it.c **** }
 113:Core/Src/stm32f7xx_it.c **** 
 114:Core/Src/stm32f7xx_it.c **** /**
 115:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Memory management fault.
 116:Core/Src/stm32f7xx_it.c ****   */
 117:Core/Src/stm32f7xx_it.c **** void MemManage_Handler(void)
 118:Core/Src/stm32f7xx_it.c **** {
 113              		.loc 1 118 1 view -0
ARM GAS  /tmp/ccOozFap.s 			page 5


 114              		.cfi_startproc
 115              		@ Volatile: function does not return.
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119              	.L9:
 119:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 120:Core/Src/stm32f7xx_it.c **** 
 121:Core/Src/stm32f7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 122:Core/Src/stm32f7xx_it.c ****   while (1)
 120              		.loc 1 122 3 discriminator 1 view .LVU13
 123:Core/Src/stm32f7xx_it.c ****   {
 124:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 125:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 126:Core/Src/stm32f7xx_it.c ****   }
 121              		.loc 1 126 3 discriminator 1 view .LVU14
 122:Core/Src/stm32f7xx_it.c ****   {
 122              		.loc 1 122 9 discriminator 1 view .LVU15
 123 0000 FEE7     		b	.L9
 124              		.cfi_endproc
 125              	.LFE146:
 127              		.section	.text.BusFault_Handler,"ax",%progbits
 128              		.align	1
 129              		.global	BusFault_Handler
 130              		.syntax unified
 131              		.thumb
 132              		.thumb_func
 134              	BusFault_Handler:
 135              	.LFB147:
 127:Core/Src/stm32f7xx_it.c **** }
 128:Core/Src/stm32f7xx_it.c **** 
 129:Core/Src/stm32f7xx_it.c **** /**
 130:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 131:Core/Src/stm32f7xx_it.c ****   */
 132:Core/Src/stm32f7xx_it.c **** void BusFault_Handler(void)
 133:Core/Src/stm32f7xx_it.c **** {
 136              		.loc 1 133 1 view -0
 137              		.cfi_startproc
 138              		@ Volatile: function does not return.
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142              	.L11:
 134:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 135:Core/Src/stm32f7xx_it.c **** 
 136:Core/Src/stm32f7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 137:Core/Src/stm32f7xx_it.c ****   while (1)
 143              		.loc 1 137 3 discriminator 1 view .LVU17
 138:Core/Src/stm32f7xx_it.c ****   {
 139:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 140:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 141:Core/Src/stm32f7xx_it.c ****   }
 144              		.loc 1 141 3 discriminator 1 view .LVU18
 137:Core/Src/stm32f7xx_it.c ****   {
 145              		.loc 1 137 9 discriminator 1 view .LVU19
 146 0000 FEE7     		b	.L11
 147              		.cfi_endproc
ARM GAS  /tmp/ccOozFap.s 			page 6


 148              	.LFE147:
 150              		.section	.text.UsageFault_Handler,"ax",%progbits
 151              		.align	1
 152              		.global	UsageFault_Handler
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 157              	UsageFault_Handler:
 158              	.LFB148:
 142:Core/Src/stm32f7xx_it.c **** }
 143:Core/Src/stm32f7xx_it.c **** 
 144:Core/Src/stm32f7xx_it.c **** /**
 145:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 146:Core/Src/stm32f7xx_it.c ****   */
 147:Core/Src/stm32f7xx_it.c **** void UsageFault_Handler(void)
 148:Core/Src/stm32f7xx_it.c **** {
 159              		.loc 1 148 1 view -0
 160              		.cfi_startproc
 161              		@ Volatile: function does not return.
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 165              	.L13:
 149:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 150:Core/Src/stm32f7xx_it.c **** 
 151:Core/Src/stm32f7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 152:Core/Src/stm32f7xx_it.c ****   while (1)
 166              		.loc 1 152 3 discriminator 1 view .LVU21
 153:Core/Src/stm32f7xx_it.c ****   {
 154:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 155:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 156:Core/Src/stm32f7xx_it.c ****   }
 167              		.loc 1 156 3 discriminator 1 view .LVU22
 152:Core/Src/stm32f7xx_it.c ****   {
 168              		.loc 1 152 9 discriminator 1 view .LVU23
 169 0000 FEE7     		b	.L13
 170              		.cfi_endproc
 171              	.LFE148:
 173              		.section	.text.SVC_Handler,"ax",%progbits
 174              		.align	1
 175              		.global	SVC_Handler
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	SVC_Handler:
 181              	.LFB149:
 157:Core/Src/stm32f7xx_it.c **** }
 158:Core/Src/stm32f7xx_it.c **** 
 159:Core/Src/stm32f7xx_it.c **** /**
 160:Core/Src/stm32f7xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 161:Core/Src/stm32f7xx_it.c ****   */
 162:Core/Src/stm32f7xx_it.c **** void SVC_Handler(void)
 163:Core/Src/stm32f7xx_it.c **** {
 182              		.loc 1 163 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccOozFap.s 			page 7


 186              		@ link register save eliminated.
 164:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 165:Core/Src/stm32f7xx_it.c **** 
 166:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 167:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 168:Core/Src/stm32f7xx_it.c **** 
 169:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 170:Core/Src/stm32f7xx_it.c **** }
 187              		.loc 1 170 1 view .LVU25
 188 0000 7047     		bx	lr
 189              		.cfi_endproc
 190              	.LFE149:
 192              		.section	.text.DebugMon_Handler,"ax",%progbits
 193              		.align	1
 194              		.global	DebugMon_Handler
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 199              	DebugMon_Handler:
 200              	.LFB150:
 171:Core/Src/stm32f7xx_it.c **** 
 172:Core/Src/stm32f7xx_it.c **** /**
 173:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Debug monitor.
 174:Core/Src/stm32f7xx_it.c ****   */
 175:Core/Src/stm32f7xx_it.c **** void DebugMon_Handler(void)
 176:Core/Src/stm32f7xx_it.c **** {
 201              		.loc 1 176 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 177:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 178:Core/Src/stm32f7xx_it.c **** 
 179:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 180:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 181:Core/Src/stm32f7xx_it.c **** 
 182:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 183:Core/Src/stm32f7xx_it.c **** }
 206              		.loc 1 183 1 view .LVU27
 207 0000 7047     		bx	lr
 208              		.cfi_endproc
 209              	.LFE150:
 211              		.section	.text.PendSV_Handler,"ax",%progbits
 212              		.align	1
 213              		.global	PendSV_Handler
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 218              	PendSV_Handler:
 219              	.LFB151:
 184:Core/Src/stm32f7xx_it.c **** 
 185:Core/Src/stm32f7xx_it.c **** /**
 186:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Pendable request for system service.
 187:Core/Src/stm32f7xx_it.c ****   */
 188:Core/Src/stm32f7xx_it.c **** void PendSV_Handler(void)
 189:Core/Src/stm32f7xx_it.c **** {
 220              		.loc 1 189 1 view -0
ARM GAS  /tmp/ccOozFap.s 			page 8


 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              		@ link register save eliminated.
 190:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 191:Core/Src/stm32f7xx_it.c **** 
 192:Core/Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 193:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 194:Core/Src/stm32f7xx_it.c **** 
 195:Core/Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 196:Core/Src/stm32f7xx_it.c **** }
 225              		.loc 1 196 1 view .LVU29
 226 0000 7047     		bx	lr
 227              		.cfi_endproc
 228              	.LFE151:
 230              		.section	.text.SysTick_Handler,"ax",%progbits
 231              		.align	1
 232              		.global	SysTick_Handler
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 237              	SysTick_Handler:
 238              	.LFB152:
 197:Core/Src/stm32f7xx_it.c **** 
 198:Core/Src/stm32f7xx_it.c **** /**
 199:Core/Src/stm32f7xx_it.c ****   * @brief This function handles System tick timer.
 200:Core/Src/stm32f7xx_it.c ****   */
 201:Core/Src/stm32f7xx_it.c **** void SysTick_Handler(void)
 202:Core/Src/stm32f7xx_it.c **** {
 239              		.loc 1 202 1 view -0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243 0000 08B5     		push	{r3, lr}
 244              	.LCFI1:
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 3, -8
 247              		.cfi_offset 14, -4
 203:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 204:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 205:Core/Src/stm32f7xx_it.c ****   HAL_IncTick();
 248              		.loc 1 205 3 view .LVU31
 249 0002 FFF7FEFF 		bl	HAL_IncTick
 250              	.LVL5:
 206:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 207:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 208:Core/Src/stm32f7xx_it.c **** }
 251              		.loc 1 208 1 is_stmt 0 view .LVU32
 252 0006 08BD     		pop	{r3, pc}
 253              		.cfi_endproc
 254              	.LFE152:
 256              		.section	.text.DMA1_Stream0_IRQHandler,"ax",%progbits
 257              		.align	1
 258              		.global	DMA1_Stream0_IRQHandler
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
ARM GAS  /tmp/ccOozFap.s 			page 9


 263              	DMA1_Stream0_IRQHandler:
 264              	.LFB153:
 209:Core/Src/stm32f7xx_it.c **** 
 210:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
 211:Core/Src/stm32f7xx_it.c **** /* STM32F7xx Peripheral Interrupt Handlers                                    */
 212:Core/Src/stm32f7xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 213:Core/Src/stm32f7xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 214:Core/Src/stm32f7xx_it.c **** /* please refer to the startup file (startup_stm32f7xx.s).                    */
 215:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
 216:Core/Src/stm32f7xx_it.c **** 
 217:Core/Src/stm32f7xx_it.c **** /**
 218:Core/Src/stm32f7xx_it.c ****   * @brief This function handles DMA1 stream0 global interrupt.
 219:Core/Src/stm32f7xx_it.c ****   */
 220:Core/Src/stm32f7xx_it.c **** void DMA1_Stream0_IRQHandler(void)
 221:Core/Src/stm32f7xx_it.c **** {
 265              		.loc 1 221 1 is_stmt 1 view -0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269 0000 08B5     		push	{r3, lr}
 270              	.LCFI2:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 3, -8
 273              		.cfi_offset 14, -4
 222:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
 223:Core/Src/stm32f7xx_it.c **** 
 224:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream0_IRQn 0 */
 225:Core/Src/stm32f7xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 274              		.loc 1 225 3 view .LVU34
 275 0002 0248     		ldr	r0, .L21
 276 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 277              	.LVL6:
 226:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
 227:Core/Src/stm32f7xx_it.c **** 
 228:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream0_IRQn 1 */
 229:Core/Src/stm32f7xx_it.c **** }
 278              		.loc 1 229 1 is_stmt 0 view .LVU35
 279 0008 08BD     		pop	{r3, pc}
 280              	.L22:
 281 000a 00BF     		.align	2
 282              	.L21:
 283 000c 00000000 		.word	hdma_i2c1_rx
 284              		.cfi_endproc
 285              	.LFE153:
 287              		.section	.text.DMA1_Stream3_IRQHandler,"ax",%progbits
 288              		.align	1
 289              		.global	DMA1_Stream3_IRQHandler
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 294              	DMA1_Stream3_IRQHandler:
 295              	.LFB154:
 230:Core/Src/stm32f7xx_it.c **** 
 231:Core/Src/stm32f7xx_it.c **** /**
 232:Core/Src/stm32f7xx_it.c ****   * @brief This function handles DMA1 stream3 global interrupt.
 233:Core/Src/stm32f7xx_it.c ****   */
 234:Core/Src/stm32f7xx_it.c **** void DMA1_Stream3_IRQHandler(void)
ARM GAS  /tmp/ccOozFap.s 			page 10


 235:Core/Src/stm32f7xx_it.c **** {
 296              		.loc 1 235 1 is_stmt 1 view -0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300 0000 08B5     		push	{r3, lr}
 301              	.LCFI3:
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 3, -8
 304              		.cfi_offset 14, -4
 236:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
 237:Core/Src/stm32f7xx_it.c **** 
 238:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream3_IRQn 0 */
 239:Core/Src/stm32f7xx_it.c ****   HAL_DMA_IRQHandler(&hdma_spi2_rx);
 305              		.loc 1 239 3 view .LVU37
 306 0002 0248     		ldr	r0, .L25
 307 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 308              	.LVL7:
 240:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */
 241:Core/Src/stm32f7xx_it.c **** 
 242:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream3_IRQn 1 */
 243:Core/Src/stm32f7xx_it.c **** }
 309              		.loc 1 243 1 is_stmt 0 view .LVU38
 310 0008 08BD     		pop	{r3, pc}
 311              	.L26:
 312 000a 00BF     		.align	2
 313              	.L25:
 314 000c 00000000 		.word	hdma_spi2_rx
 315              		.cfi_endproc
 316              	.LFE154:
 318              		.section	.text.DMA1_Stream4_IRQHandler,"ax",%progbits
 319              		.align	1
 320              		.global	DMA1_Stream4_IRQHandler
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	DMA1_Stream4_IRQHandler:
 326              	.LFB155:
 244:Core/Src/stm32f7xx_it.c **** 
 245:Core/Src/stm32f7xx_it.c **** /**
 246:Core/Src/stm32f7xx_it.c ****   * @brief This function handles DMA1 stream4 global interrupt.
 247:Core/Src/stm32f7xx_it.c ****   */
 248:Core/Src/stm32f7xx_it.c **** void DMA1_Stream4_IRQHandler(void)
 249:Core/Src/stm32f7xx_it.c **** {
 327              		.loc 1 249 1 is_stmt 1 view -0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331 0000 08B5     		push	{r3, lr}
 332              	.LCFI4:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 3, -8
 335              		.cfi_offset 14, -4
 250:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
 251:Core/Src/stm32f7xx_it.c **** 
 252:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream4_IRQn 0 */
 253:Core/Src/stm32f7xx_it.c ****   HAL_DMA_IRQHandler(&hdma_spi2_tx);
ARM GAS  /tmp/ccOozFap.s 			page 11


 336              		.loc 1 253 3 view .LVU40
 337 0002 0248     		ldr	r0, .L29
 338 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 339              	.LVL8:
 254:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */
 255:Core/Src/stm32f7xx_it.c **** 
 256:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream4_IRQn 1 */
 257:Core/Src/stm32f7xx_it.c **** }
 340              		.loc 1 257 1 is_stmt 0 view .LVU41
 341 0008 08BD     		pop	{r3, pc}
 342              	.L30:
 343 000a 00BF     		.align	2
 344              	.L29:
 345 000c 00000000 		.word	hdma_spi2_tx
 346              		.cfi_endproc
 347              	.LFE155:
 349              		.section	.text.DMA1_Stream6_IRQHandler,"ax",%progbits
 350              		.align	1
 351              		.global	DMA1_Stream6_IRQHandler
 352              		.syntax unified
 353              		.thumb
 354              		.thumb_func
 356              	DMA1_Stream6_IRQHandler:
 357              	.LFB156:
 258:Core/Src/stm32f7xx_it.c **** 
 259:Core/Src/stm32f7xx_it.c **** /**
 260:Core/Src/stm32f7xx_it.c ****   * @brief This function handles DMA1 stream6 global interrupt.
 261:Core/Src/stm32f7xx_it.c ****   */
 262:Core/Src/stm32f7xx_it.c **** void DMA1_Stream6_IRQHandler(void)
 263:Core/Src/stm32f7xx_it.c **** {
 358              		.loc 1 263 1 is_stmt 1 view -0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 0
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 362 0000 08B5     		push	{r3, lr}
 363              	.LCFI5:
 364              		.cfi_def_cfa_offset 8
 365              		.cfi_offset 3, -8
 366              		.cfi_offset 14, -4
 264:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
 265:Core/Src/stm32f7xx_it.c **** 
 266:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream6_IRQn 0 */
 267:Core/Src/stm32f7xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 367              		.loc 1 267 3 view .LVU43
 368 0002 0248     		ldr	r0, .L33
 369 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 370              	.LVL9:
 268:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */
 269:Core/Src/stm32f7xx_it.c **** 
 270:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream6_IRQn 1 */
 271:Core/Src/stm32f7xx_it.c **** }
 371              		.loc 1 271 1 is_stmt 0 view .LVU44
 372 0008 08BD     		pop	{r3, pc}
 373              	.L34:
 374 000a 00BF     		.align	2
 375              	.L33:
 376 000c 00000000 		.word	hdma_i2c1_tx
ARM GAS  /tmp/ccOozFap.s 			page 12


 377              		.cfi_endproc
 378              	.LFE156:
 380              		.section	.text.TIM1_UP_TIM10_IRQHandler,"ax",%progbits
 381              		.align	1
 382              		.global	TIM1_UP_TIM10_IRQHandler
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 387              	TIM1_UP_TIM10_IRQHandler:
 388              	.LFB157:
 272:Core/Src/stm32f7xx_it.c **** 
 273:Core/Src/stm32f7xx_it.c **** /**
 274:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 275:Core/Src/stm32f7xx_it.c ****   */
 276:Core/Src/stm32f7xx_it.c **** void TIM1_UP_TIM10_IRQHandler(void)
 277:Core/Src/stm32f7xx_it.c **** {
 389              		.loc 1 277 1 is_stmt 1 view -0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 0
 392              		@ frame_needed = 0, uses_anonymous_args = 0
 393 0000 08B5     		push	{r3, lr}
 394              	.LCFI6:
 395              		.cfi_def_cfa_offset 8
 396              		.cfi_offset 3, -8
 397              		.cfi_offset 14, -4
 278:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
 279:Core/Src/stm32f7xx_it.c **** 
 280:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
 281:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 398              		.loc 1 281 3 view .LVU46
 399 0002 0248     		ldr	r0, .L37
 400 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 401              	.LVL10:
 282:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
 283:Core/Src/stm32f7xx_it.c **** 
 284:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
 285:Core/Src/stm32f7xx_it.c **** }
 402              		.loc 1 285 1 is_stmt 0 view .LVU47
 403 0008 08BD     		pop	{r3, pc}
 404              	.L38:
 405 000a 00BF     		.align	2
 406              	.L37:
 407 000c 00000000 		.word	htim1
 408              		.cfi_endproc
 409              	.LFE157:
 411              		.section	.text.TIM1_CC_IRQHandler,"ax",%progbits
 412              		.align	1
 413              		.global	TIM1_CC_IRQHandler
 414              		.syntax unified
 415              		.thumb
 416              		.thumb_func
 418              	TIM1_CC_IRQHandler:
 419              	.LFB158:
 286:Core/Src/stm32f7xx_it.c **** 
 287:Core/Src/stm32f7xx_it.c **** /**
 288:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM1 capture compare interrupt.
 289:Core/Src/stm32f7xx_it.c ****   */
ARM GAS  /tmp/ccOozFap.s 			page 13


 290:Core/Src/stm32f7xx_it.c **** void TIM1_CC_IRQHandler(void)
 291:Core/Src/stm32f7xx_it.c **** {
 420              		.loc 1 291 1 is_stmt 1 view -0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424 0000 08B5     		push	{r3, lr}
 425              	.LCFI7:
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 3, -8
 428              		.cfi_offset 14, -4
 292:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM1_CC_IRQn 0 */
 293:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM1_CC_IRQn 0 */
 294:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 429              		.loc 1 294 3 view .LVU49
 430 0002 0248     		ldr	r0, .L41
 431 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 432              	.LVL11:
 295:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 296:Core/Src/stm32f7xx_it.c ****   // This has be be in here, otherwise the system halts when using other timers !!!FIXME!!! Advance
 297:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM1_CC_IRQn 1 */
 298:Core/Src/stm32f7xx_it.c **** }
 433              		.loc 1 298 1 is_stmt 0 view .LVU50
 434 0008 08BD     		pop	{r3, pc}
 435              	.L42:
 436 000a 00BF     		.align	2
 437              	.L41:
 438 000c 00000000 		.word	htim1
 439              		.cfi_endproc
 440              	.LFE158:
 442              		.section	.text.I2C1_EV_IRQHandler,"ax",%progbits
 443              		.align	1
 444              		.global	I2C1_EV_IRQHandler
 445              		.syntax unified
 446              		.thumb
 447              		.thumb_func
 449              	I2C1_EV_IRQHandler:
 450              	.LFB159:
 299:Core/Src/stm32f7xx_it.c **** 
 300:Core/Src/stm32f7xx_it.c **** /**
 301:Core/Src/stm32f7xx_it.c ****   * @brief This function handles I2C1 event interrupt.
 302:Core/Src/stm32f7xx_it.c ****   */
 303:Core/Src/stm32f7xx_it.c **** void I2C1_EV_IRQHandler(void)
 304:Core/Src/stm32f7xx_it.c **** {
 451              		.loc 1 304 1 is_stmt 1 view -0
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455 0000 08B5     		push	{r3, lr}
 456              	.LCFI8:
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 3, -8
 459              		.cfi_offset 14, -4
 305:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN I2C1_EV_IRQn 0 */
 306:Core/Src/stm32f7xx_it.c **** 
 307:Core/Src/stm32f7xx_it.c ****   /* USER CODE END I2C1_EV_IRQn 0 */
 308:Core/Src/stm32f7xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c1);
ARM GAS  /tmp/ccOozFap.s 			page 14


 460              		.loc 1 308 3 view .LVU52
 461 0002 0248     		ldr	r0, .L45
 462 0004 FFF7FEFF 		bl	HAL_I2C_EV_IRQHandler
 463              	.LVL12:
 309:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN I2C1_EV_IRQn 1 */
 310:Core/Src/stm32f7xx_it.c **** 
 311:Core/Src/stm32f7xx_it.c ****   /* USER CODE END I2C1_EV_IRQn 1 */
 312:Core/Src/stm32f7xx_it.c **** }
 464              		.loc 1 312 1 is_stmt 0 view .LVU53
 465 0008 08BD     		pop	{r3, pc}
 466              	.L46:
 467 000a 00BF     		.align	2
 468              	.L45:
 469 000c 00000000 		.word	hi2c1
 470              		.cfi_endproc
 471              	.LFE159:
 473              		.section	.text.I2C1_ER_IRQHandler,"ax",%progbits
 474              		.align	1
 475              		.global	I2C1_ER_IRQHandler
 476              		.syntax unified
 477              		.thumb
 478              		.thumb_func
 480              	I2C1_ER_IRQHandler:
 481              	.LFB160:
 313:Core/Src/stm32f7xx_it.c **** 
 314:Core/Src/stm32f7xx_it.c **** /**
 315:Core/Src/stm32f7xx_it.c ****   * @brief This function handles I2C1 error interrupt.
 316:Core/Src/stm32f7xx_it.c ****   */
 317:Core/Src/stm32f7xx_it.c **** void I2C1_ER_IRQHandler(void)
 318:Core/Src/stm32f7xx_it.c **** {
 482              		.loc 1 318 1 is_stmt 1 view -0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486 0000 08B5     		push	{r3, lr}
 487              	.LCFI9:
 488              		.cfi_def_cfa_offset 8
 489              		.cfi_offset 3, -8
 490              		.cfi_offset 14, -4
 319:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN I2C1_ER_IRQn 0 */
 320:Core/Src/stm32f7xx_it.c **** 
 321:Core/Src/stm32f7xx_it.c ****   /* USER CODE END I2C1_ER_IRQn 0 */
 322:Core/Src/stm32f7xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c1);
 491              		.loc 1 322 3 view .LVU55
 492 0002 0248     		ldr	r0, .L49
 493 0004 FFF7FEFF 		bl	HAL_I2C_ER_IRQHandler
 494              	.LVL13:
 323:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN I2C1_ER_IRQn 1 */
 324:Core/Src/stm32f7xx_it.c **** 
 325:Core/Src/stm32f7xx_it.c ****   /* USER CODE END I2C1_ER_IRQn 1 */
 326:Core/Src/stm32f7xx_it.c **** }
 495              		.loc 1 326 1 is_stmt 0 view .LVU56
 496 0008 08BD     		pop	{r3, pc}
 497              	.L50:
 498 000a 00BF     		.align	2
 499              	.L49:
 500 000c 00000000 		.word	hi2c1
ARM GAS  /tmp/ccOozFap.s 			page 15


 501              		.cfi_endproc
 502              	.LFE160:
 504              		.section	.text.SPI2_IRQHandler,"ax",%progbits
 505              		.align	1
 506              		.global	SPI2_IRQHandler
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 511              	SPI2_IRQHandler:
 512              	.LFB161:
 327:Core/Src/stm32f7xx_it.c **** 
 328:Core/Src/stm32f7xx_it.c **** /**
 329:Core/Src/stm32f7xx_it.c ****   * @brief This function handles SPI2 global interrupt.
 330:Core/Src/stm32f7xx_it.c ****   */
 331:Core/Src/stm32f7xx_it.c **** void SPI2_IRQHandler(void)
 332:Core/Src/stm32f7xx_it.c **** {
 513              		.loc 1 332 1 is_stmt 1 view -0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517 0000 08B5     		push	{r3, lr}
 518              	.LCFI10:
 519              		.cfi_def_cfa_offset 8
 520              		.cfi_offset 3, -8
 521              		.cfi_offset 14, -4
 333:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SPI2_IRQn 0 */
 334:Core/Src/stm32f7xx_it.c **** 
 335:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SPI2_IRQn 0 */
 336:Core/Src/stm32f7xx_it.c ****   HAL_SPI_IRQHandler(&hspi2);
 522              		.loc 1 336 3 view .LVU58
 523 0002 0248     		ldr	r0, .L53
 524 0004 FFF7FEFF 		bl	HAL_SPI_IRQHandler
 525              	.LVL14:
 337:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SPI2_IRQn 1 */
 338:Core/Src/stm32f7xx_it.c **** 
 339:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SPI2_IRQn 1 */
 340:Core/Src/stm32f7xx_it.c **** }
 526              		.loc 1 340 1 is_stmt 0 view .LVU59
 527 0008 08BD     		pop	{r3, pc}
 528              	.L54:
 529 000a 00BF     		.align	2
 530              	.L53:
 531 000c 00000000 		.word	hspi2
 532              		.cfi_endproc
 533              	.LFE161:
 535              		.section	.text.TIM8_CC_IRQHandler,"ax",%progbits
 536              		.align	1
 537              		.global	TIM8_CC_IRQHandler
 538              		.syntax unified
 539              		.thumb
 540              		.thumb_func
 542              	TIM8_CC_IRQHandler:
 543              	.LFB162:
 341:Core/Src/stm32f7xx_it.c **** 
 342:Core/Src/stm32f7xx_it.c **** /**
 343:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM8 capture compare interrupt.
 344:Core/Src/stm32f7xx_it.c ****   */
ARM GAS  /tmp/ccOozFap.s 			page 16


 345:Core/Src/stm32f7xx_it.c **** void TIM8_CC_IRQHandler(void)
 346:Core/Src/stm32f7xx_it.c **** {
 544              		.loc 1 346 1 is_stmt 1 view -0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548 0000 08B5     		push	{r3, lr}
 549              	.LCFI11:
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 3, -8
 552              		.cfi_offset 14, -4
 347:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM8_CC_IRQn 0 */
 348:Core/Src/stm32f7xx_it.c **** 
 349:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM8_CC_IRQn 0 */
 350:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim8);
 553              		.loc 1 350 3 view .LVU61
 554 0002 0248     		ldr	r0, .L57
 555 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 556              	.LVL15:
 351:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM8_CC_IRQn 1 */
 352:Core/Src/stm32f7xx_it.c **** 
 353:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM8_CC_IRQn 1 */
 354:Core/Src/stm32f7xx_it.c **** }
 557              		.loc 1 354 1 is_stmt 0 view .LVU62
 558 0008 08BD     		pop	{r3, pc}
 559              	.L58:
 560 000a 00BF     		.align	2
 561              	.L57:
 562 000c 00000000 		.word	htim8
 563              		.cfi_endproc
 564              	.LFE162:
 566              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 567              		.align	1
 568              		.global	TIM6_DAC_IRQHandler
 569              		.syntax unified
 570              		.thumb
 571              		.thumb_func
 573              	TIM6_DAC_IRQHandler:
 574              	.LFB163:
 355:Core/Src/stm32f7xx_it.c **** 
 356:Core/Src/stm32f7xx_it.c **** /**
 357:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
 358:Core/Src/stm32f7xx_it.c ****   */
 359:Core/Src/stm32f7xx_it.c **** void TIM6_DAC_IRQHandler(void)
 360:Core/Src/stm32f7xx_it.c **** {
 575              		.loc 1 360 1 is_stmt 1 view -0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579 0000 08B5     		push	{r3, lr}
 580              	.LCFI12:
 581              		.cfi_def_cfa_offset 8
 582              		.cfi_offset 3, -8
 583              		.cfi_offset 14, -4
 361:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
 362:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 0 */
 363:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim6);
ARM GAS  /tmp/ccOozFap.s 			page 17


 584              		.loc 1 363 3 view .LVU64
 585 0002 0248     		ldr	r0, .L61
 586 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 587              	.LVL16:
 364:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
 365:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 1 */
 366:Core/Src/stm32f7xx_it.c **** }
 588              		.loc 1 366 1 is_stmt 0 view .LVU65
 589 0008 08BD     		pop	{r3, pc}
 590              	.L62:
 591 000a 00BF     		.align	2
 592              	.L61:
 593 000c 00000000 		.word	htim6
 594              		.cfi_endproc
 595              	.LFE163:
 597              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 598              		.align	1
 599              		.global	TIM7_IRQHandler
 600              		.syntax unified
 601              		.thumb
 602              		.thumb_func
 604              	TIM7_IRQHandler:
 605              	.LFB164:
 367:Core/Src/stm32f7xx_it.c **** 
 368:Core/Src/stm32f7xx_it.c **** /**
 369:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM7 global interrupt.
 370:Core/Src/stm32f7xx_it.c ****   */
 371:Core/Src/stm32f7xx_it.c **** void TIM7_IRQHandler(void)
 372:Core/Src/stm32f7xx_it.c **** {
 606              		.loc 1 372 1 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610 0000 08B5     		push	{r3, lr}
 611              	.LCFI13:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 3, -8
 614              		.cfi_offset 14, -4
 373:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 0 */
 374:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM7_IRQn 0 */
 375:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim7);
 615              		.loc 1 375 3 view .LVU67
 616 0002 0248     		ldr	r0, .L65
 617 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 618              	.LVL17:
 376:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 1 */
 377:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM7_IRQn 1 */
 378:Core/Src/stm32f7xx_it.c **** }
 619              		.loc 1 378 1 is_stmt 0 view .LVU68
 620 0008 08BD     		pop	{r3, pc}
 621              	.L66:
 622 000a 00BF     		.align	2
 623              	.L65:
 624 000c 00000000 		.word	htim7
 625              		.cfi_endproc
 626              	.LFE164:
 628              		.section	.text.OTG_HS_IRQHandler,"ax",%progbits
ARM GAS  /tmp/ccOozFap.s 			page 18


 629              		.align	1
 630              		.global	OTG_HS_IRQHandler
 631              		.syntax unified
 632              		.thumb
 633              		.thumb_func
 635              	OTG_HS_IRQHandler:
 636              	.LFB165:
 379:Core/Src/stm32f7xx_it.c **** 
 380:Core/Src/stm32f7xx_it.c **** /**
 381:Core/Src/stm32f7xx_it.c ****   * @brief This function handles USB On The Go HS global interrupt.
 382:Core/Src/stm32f7xx_it.c ****   */
 383:Core/Src/stm32f7xx_it.c **** void OTG_HS_IRQHandler(void)
 384:Core/Src/stm32f7xx_it.c **** {
 637              		.loc 1 384 1 is_stmt 1 view -0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641 0000 08B5     		push	{r3, lr}
 642              	.LCFI14:
 643              		.cfi_def_cfa_offset 8
 644              		.cfi_offset 3, -8
 645              		.cfi_offset 14, -4
 385:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN OTG_HS_IRQn 0 */
 386:Core/Src/stm32f7xx_it.c **** 
 387:Core/Src/stm32f7xx_it.c ****   /* USER CODE END OTG_HS_IRQn 0 */
 388:Core/Src/stm32f7xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 646              		.loc 1 388 3 view .LVU70
 647 0002 0248     		ldr	r0, .L69
 648 0004 FFF7FEFF 		bl	HAL_PCD_IRQHandler
 649              	.LVL18:
 389:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN OTG_HS_IRQn 1 */
 390:Core/Src/stm32f7xx_it.c **** 
 391:Core/Src/stm32f7xx_it.c ****   /* USER CODE END OTG_HS_IRQn 1 */
 392:Core/Src/stm32f7xx_it.c **** }
 650              		.loc 1 392 1 is_stmt 0 view .LVU71
 651 0008 08BD     		pop	{r3, pc}
 652              	.L70:
 653 000a 00BF     		.align	2
 654              	.L69:
 655 000c 00000000 		.word	hpcd_USB_OTG_HS
 656              		.cfi_endproc
 657              	.LFE165:
 659              		.text
 660              	.Letext0:
 661              		.file 2 "/opt/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 662              		.file 3 "/opt/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 663              		.file 4 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f723xx.h"
 664              		.file 5 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 665              		.file 6 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 666              		.file 7 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 667              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_i2c.h"
 668              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 669              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 670              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_usb.h"
 671              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pcd.h"
 672              		.file 13 "Core/Inc/spi.h"
 673              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccOozFap.s 			page 19


 674              		.file 15 "Core/Inc/nyan_os.h"
ARM GAS  /tmp/ccOozFap.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_it.c
     /tmp/ccOozFap.s:20     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccOozFap.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccOozFap.s:44     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccOozFap.s:50     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccOozFap.s:100    .text.HardFault_Handler:0000000000000038 $d
     /tmp/ccOozFap.s:105    .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccOozFap.s:111    .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccOozFap.s:128    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccOozFap.s:134    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccOozFap.s:151    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccOozFap.s:157    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccOozFap.s:174    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccOozFap.s:180    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccOozFap.s:193    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccOozFap.s:199    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccOozFap.s:212    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccOozFap.s:218    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccOozFap.s:231    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccOozFap.s:237    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccOozFap.s:257    .text.DMA1_Stream0_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:263    .text.DMA1_Stream0_IRQHandler:0000000000000000 DMA1_Stream0_IRQHandler
     /tmp/ccOozFap.s:283    .text.DMA1_Stream0_IRQHandler:000000000000000c $d
     /tmp/ccOozFap.s:288    .text.DMA1_Stream3_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:294    .text.DMA1_Stream3_IRQHandler:0000000000000000 DMA1_Stream3_IRQHandler
     /tmp/ccOozFap.s:314    .text.DMA1_Stream3_IRQHandler:000000000000000c $d
     /tmp/ccOozFap.s:319    .text.DMA1_Stream4_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:325    .text.DMA1_Stream4_IRQHandler:0000000000000000 DMA1_Stream4_IRQHandler
     /tmp/ccOozFap.s:345    .text.DMA1_Stream4_IRQHandler:000000000000000c $d
     /tmp/ccOozFap.s:350    .text.DMA1_Stream6_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:356    .text.DMA1_Stream6_IRQHandler:0000000000000000 DMA1_Stream6_IRQHandler
     /tmp/ccOozFap.s:376    .text.DMA1_Stream6_IRQHandler:000000000000000c $d
     /tmp/ccOozFap.s:381    .text.TIM1_UP_TIM10_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:387    .text.TIM1_UP_TIM10_IRQHandler:0000000000000000 TIM1_UP_TIM10_IRQHandler
     /tmp/ccOozFap.s:407    .text.TIM1_UP_TIM10_IRQHandler:000000000000000c $d
     /tmp/ccOozFap.s:412    .text.TIM1_CC_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:418    .text.TIM1_CC_IRQHandler:0000000000000000 TIM1_CC_IRQHandler
     /tmp/ccOozFap.s:438    .text.TIM1_CC_IRQHandler:000000000000000c $d
     /tmp/ccOozFap.s:443    .text.I2C1_EV_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:449    .text.I2C1_EV_IRQHandler:0000000000000000 I2C1_EV_IRQHandler
     /tmp/ccOozFap.s:469    .text.I2C1_EV_IRQHandler:000000000000000c $d
     /tmp/ccOozFap.s:474    .text.I2C1_ER_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:480    .text.I2C1_ER_IRQHandler:0000000000000000 I2C1_ER_IRQHandler
     /tmp/ccOozFap.s:500    .text.I2C1_ER_IRQHandler:000000000000000c $d
     /tmp/ccOozFap.s:505    .text.SPI2_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:511    .text.SPI2_IRQHandler:0000000000000000 SPI2_IRQHandler
     /tmp/ccOozFap.s:531    .text.SPI2_IRQHandler:000000000000000c $d
     /tmp/ccOozFap.s:536    .text.TIM8_CC_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:542    .text.TIM8_CC_IRQHandler:0000000000000000 TIM8_CC_IRQHandler
     /tmp/ccOozFap.s:562    .text.TIM8_CC_IRQHandler:000000000000000c $d
     /tmp/ccOozFap.s:567    .text.TIM6_DAC_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:573    .text.TIM6_DAC_IRQHandler:0000000000000000 TIM6_DAC_IRQHandler
     /tmp/ccOozFap.s:593    .text.TIM6_DAC_IRQHandler:000000000000000c $d
     /tmp/ccOozFap.s:598    .text.TIM7_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:604    .text.TIM7_IRQHandler:0000000000000000 TIM7_IRQHandler
     /tmp/ccOozFap.s:624    .text.TIM7_IRQHandler:000000000000000c $d
ARM GAS  /tmp/ccOozFap.s 			page 21


     /tmp/ccOozFap.s:629    .text.OTG_HS_IRQHandler:0000000000000000 $t
     /tmp/ccOozFap.s:635    .text.OTG_HS_IRQHandler:0000000000000000 OTG_HS_IRQHandler
     /tmp/ccOozFap.s:655    .text.OTG_HS_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_IncTick
HAL_DMA_IRQHandler
hdma_i2c1_rx
hdma_spi2_rx
hdma_spi2_tx
hdma_i2c1_tx
HAL_TIM_IRQHandler
htim1
HAL_I2C_EV_IRQHandler
hi2c1
HAL_I2C_ER_IRQHandler
HAL_SPI_IRQHandler
hspi2
htim8
htim6
htim7
HAL_PCD_IRQHandler
hpcd_USB_OTG_HS
