ARM GAS  /tmp/ccpbkSkn.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f7xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	1
  21              		.global	NMI_Handler
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB141:
  28              		.file 1 "Core/Src/stm32f7xx_it.c"
   1:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f7xx_it.c **** /**
   3:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f7xx_it.c ****   * @file    stm32f7xx_it.c
   5:Core/Src/stm32f7xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f7xx_it.c ****   * @attention
   8:Core/Src/stm32f7xx_it.c ****   *
   9:Core/Src/stm32f7xx_it.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/stm32f7xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f7xx_it.c ****   *
  12:Core/Src/stm32f7xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f7xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f7xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f7xx_it.c ****   *
  16:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f7xx_it.c ****   */
  18:Core/Src/stm32f7xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f7xx_it.c **** 
  20:Core/Src/stm32f7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f7xx_it.c **** #include "main.h"
  22:Core/Src/stm32f7xx_it.c **** #include "stm32f7xx_it.h"
  23:Core/Src/stm32f7xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32f7xx_it.c **** #include "nyan_leds.h"
  26:Core/Src/stm32f7xx_it.c **** /* USER CODE END Includes */
  27:Core/Src/stm32f7xx_it.c **** 
  28:Core/Src/stm32f7xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN TD */
  30:Core/Src/stm32f7xx_it.c **** 
ARM GAS  /tmp/ccpbkSkn.s 			page 2


  31:Core/Src/stm32f7xx_it.c **** /* USER CODE END TD */
  32:Core/Src/stm32f7xx_it.c **** 
  33:Core/Src/stm32f7xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PD */
  35:Core/Src/stm32f7xx_it.c **** 
  36:Core/Src/stm32f7xx_it.c **** /* USER CODE END PD */
  37:Core/Src/stm32f7xx_it.c **** 
  38:Core/Src/stm32f7xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PM */
  40:Core/Src/stm32f7xx_it.c **** 
  41:Core/Src/stm32f7xx_it.c **** /* USER CODE END PM */
  42:Core/Src/stm32f7xx_it.c **** 
  43:Core/Src/stm32f7xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PV */
  45:Core/Src/stm32f7xx_it.c **** 
  46:Core/Src/stm32f7xx_it.c **** /* USER CODE END PV */
  47:Core/Src/stm32f7xx_it.c **** 
  48:Core/Src/stm32f7xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PFP */
  50:Core/Src/stm32f7xx_it.c **** 
  51:Core/Src/stm32f7xx_it.c **** /* USER CODE END PFP */
  52:Core/Src/stm32f7xx_it.c **** 
  53:Core/Src/stm32f7xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN 0 */
  55:Core/Src/stm32f7xx_it.c **** 
  56:Core/Src/stm32f7xx_it.c **** /* USER CODE END 0 */
  57:Core/Src/stm32f7xx_it.c **** 
  58:Core/Src/stm32f7xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Core/Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim1;
  60:Core/Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim6;
  61:Core/Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim7;
  62:Core/Src/stm32f7xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_OTG_HS;
  63:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN EV */
  64:Core/Src/stm32f7xx_it.c **** extern double system_status_led_angle;
  65:Core/Src/stm32f7xx_it.c **** /* USER CODE END EV */
  66:Core/Src/stm32f7xx_it.c **** 
  67:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
  68:Core/Src/stm32f7xx_it.c **** /*           Cortex-M7 Processor Interruption and Exception Handlers          */
  69:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
  70:Core/Src/stm32f7xx_it.c **** /**
  71:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Core/Src/stm32f7xx_it.c ****   */
  73:Core/Src/stm32f7xx_it.c **** void NMI_Handler(void)
  74:Core/Src/stm32f7xx_it.c **** {
  29              		.loc 1 74 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  75:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Core/Src/stm32f7xx_it.c **** 
  77:Core/Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Core/Src/stm32f7xx_it.c ****   while (1)
  36              		.loc 1 79 3 discriminator 1 view .LVU1
ARM GAS  /tmp/ccpbkSkn.s 			page 3


  80:Core/Src/stm32f7xx_it.c ****   {
  81:Core/Src/stm32f7xx_it.c ****   }
  37              		.loc 1 81 3 discriminator 1 view .LVU2
  79:Core/Src/stm32f7xx_it.c ****   {
  38              		.loc 1 79 9 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE141:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  50              	HardFault_Handler:
  51              	.LFB142:
  82:Core/Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  83:Core/Src/stm32f7xx_it.c **** }
  84:Core/Src/stm32f7xx_it.c **** 
  85:Core/Src/stm32f7xx_it.c **** /**
  86:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Hard fault interrupt.
  87:Core/Src/stm32f7xx_it.c ****   */
  88:Core/Src/stm32f7xx_it.c **** void HardFault_Handler(void)
  89:Core/Src/stm32f7xx_it.c **** {
  52              		.loc 1 89 1 view -0
  53              		.cfi_startproc
  54              		@ Volatile: function does not return.
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.L4:
  90:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  91:Core/Src/stm32f7xx_it.c **** 
  92:Core/Src/stm32f7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  93:Core/Src/stm32f7xx_it.c ****   while (1)
  59              		.loc 1 93 3 discriminator 1 view .LVU5
  94:Core/Src/stm32f7xx_it.c ****   {
  95:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  96:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  97:Core/Src/stm32f7xx_it.c ****   }
  60              		.loc 1 97 3 discriminator 1 view .LVU6
  93:Core/Src/stm32f7xx_it.c ****   {
  61              		.loc 1 93 9 discriminator 1 view .LVU7
  62 0000 FEE7     		b	.L4
  63              		.cfi_endproc
  64              	.LFE142:
  66              		.section	.text.MemManage_Handler,"ax",%progbits
  67              		.align	1
  68              		.global	MemManage_Handler
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  73              	MemManage_Handler:
  74              	.LFB143:
  98:Core/Src/stm32f7xx_it.c **** }
  99:Core/Src/stm32f7xx_it.c **** 
 100:Core/Src/stm32f7xx_it.c **** /**
ARM GAS  /tmp/ccpbkSkn.s 			page 4


 101:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Memory management fault.
 102:Core/Src/stm32f7xx_it.c ****   */
 103:Core/Src/stm32f7xx_it.c **** void MemManage_Handler(void)
 104:Core/Src/stm32f7xx_it.c **** {
  75              		.loc 1 104 1 view -0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.L6:
 105:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 106:Core/Src/stm32f7xx_it.c **** 
 107:Core/Src/stm32f7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 108:Core/Src/stm32f7xx_it.c ****   while (1)
  82              		.loc 1 108 3 discriminator 1 view .LVU9
 109:Core/Src/stm32f7xx_it.c ****   {
 110:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 111:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 112:Core/Src/stm32f7xx_it.c ****   }
  83              		.loc 1 112 3 discriminator 1 view .LVU10
 108:Core/Src/stm32f7xx_it.c ****   {
  84              		.loc 1 108 9 discriminator 1 view .LVU11
  85 0000 FEE7     		b	.L6
  86              		.cfi_endproc
  87              	.LFE143:
  89              		.section	.text.BusFault_Handler,"ax",%progbits
  90              		.align	1
  91              		.global	BusFault_Handler
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  96              	BusFault_Handler:
  97              	.LFB144:
 113:Core/Src/stm32f7xx_it.c **** }
 114:Core/Src/stm32f7xx_it.c **** 
 115:Core/Src/stm32f7xx_it.c **** /**
 116:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 117:Core/Src/stm32f7xx_it.c ****   */
 118:Core/Src/stm32f7xx_it.c **** void BusFault_Handler(void)
 119:Core/Src/stm32f7xx_it.c **** {
  98              		.loc 1 119 1 view -0
  99              		.cfi_startproc
 100              		@ Volatile: function does not return.
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.L8:
 120:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 121:Core/Src/stm32f7xx_it.c **** 
 122:Core/Src/stm32f7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 123:Core/Src/stm32f7xx_it.c ****   while (1)
 105              		.loc 1 123 3 discriminator 1 view .LVU13
 124:Core/Src/stm32f7xx_it.c ****   {
 125:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 126:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 127:Core/Src/stm32f7xx_it.c ****   }
ARM GAS  /tmp/ccpbkSkn.s 			page 5


 106              		.loc 1 127 3 discriminator 1 view .LVU14
 123:Core/Src/stm32f7xx_it.c ****   {
 107              		.loc 1 123 9 discriminator 1 view .LVU15
 108 0000 FEE7     		b	.L8
 109              		.cfi_endproc
 110              	.LFE144:
 112              		.section	.text.UsageFault_Handler,"ax",%progbits
 113              		.align	1
 114              		.global	UsageFault_Handler
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 119              	UsageFault_Handler:
 120              	.LFB145:
 128:Core/Src/stm32f7xx_it.c **** }
 129:Core/Src/stm32f7xx_it.c **** 
 130:Core/Src/stm32f7xx_it.c **** /**
 131:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 132:Core/Src/stm32f7xx_it.c ****   */
 133:Core/Src/stm32f7xx_it.c **** void UsageFault_Handler(void)
 134:Core/Src/stm32f7xx_it.c **** {
 121              		.loc 1 134 1 view -0
 122              		.cfi_startproc
 123              		@ Volatile: function does not return.
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127              	.L10:
 135:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 136:Core/Src/stm32f7xx_it.c **** 
 137:Core/Src/stm32f7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 138:Core/Src/stm32f7xx_it.c ****   while (1)
 128              		.loc 1 138 3 discriminator 1 view .LVU17
 139:Core/Src/stm32f7xx_it.c ****   {
 140:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 141:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 142:Core/Src/stm32f7xx_it.c ****   }
 129              		.loc 1 142 3 discriminator 1 view .LVU18
 138:Core/Src/stm32f7xx_it.c ****   {
 130              		.loc 1 138 9 discriminator 1 view .LVU19
 131 0000 FEE7     		b	.L10
 132              		.cfi_endproc
 133              	.LFE145:
 135              		.section	.text.SVC_Handler,"ax",%progbits
 136              		.align	1
 137              		.global	SVC_Handler
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 142              	SVC_Handler:
 143              	.LFB146:
 143:Core/Src/stm32f7xx_it.c **** }
 144:Core/Src/stm32f7xx_it.c **** 
 145:Core/Src/stm32f7xx_it.c **** /**
 146:Core/Src/stm32f7xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 147:Core/Src/stm32f7xx_it.c ****   */
 148:Core/Src/stm32f7xx_it.c **** void SVC_Handler(void)
ARM GAS  /tmp/ccpbkSkn.s 			page 6


 149:Core/Src/stm32f7xx_it.c **** {
 144              		.loc 1 149 1 view -0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 150:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 151:Core/Src/stm32f7xx_it.c **** 
 152:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 153:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 154:Core/Src/stm32f7xx_it.c **** 
 155:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 156:Core/Src/stm32f7xx_it.c **** }
 149              		.loc 1 156 1 view .LVU21
 150 0000 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE146:
 154              		.section	.text.DebugMon_Handler,"ax",%progbits
 155              		.align	1
 156              		.global	DebugMon_Handler
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 161              	DebugMon_Handler:
 162              	.LFB147:
 157:Core/Src/stm32f7xx_it.c **** 
 158:Core/Src/stm32f7xx_it.c **** /**
 159:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Debug monitor.
 160:Core/Src/stm32f7xx_it.c ****   */
 161:Core/Src/stm32f7xx_it.c **** void DebugMon_Handler(void)
 162:Core/Src/stm32f7xx_it.c **** {
 163              		.loc 1 162 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 163:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 164:Core/Src/stm32f7xx_it.c **** 
 165:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 166:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 167:Core/Src/stm32f7xx_it.c **** 
 168:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 169:Core/Src/stm32f7xx_it.c **** }
 168              		.loc 1 169 1 view .LVU23
 169 0000 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE147:
 173              		.section	.text.PendSV_Handler,"ax",%progbits
 174              		.align	1
 175              		.global	PendSV_Handler
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	PendSV_Handler:
 181              	.LFB148:
 170:Core/Src/stm32f7xx_it.c **** 
 171:Core/Src/stm32f7xx_it.c **** /**
ARM GAS  /tmp/ccpbkSkn.s 			page 7


 172:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Pendable request for system service.
 173:Core/Src/stm32f7xx_it.c ****   */
 174:Core/Src/stm32f7xx_it.c **** void PendSV_Handler(void)
 175:Core/Src/stm32f7xx_it.c **** {
 182              		.loc 1 175 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
 176:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 177:Core/Src/stm32f7xx_it.c **** 
 178:Core/Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 179:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 180:Core/Src/stm32f7xx_it.c **** 
 181:Core/Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 182:Core/Src/stm32f7xx_it.c **** }
 187              		.loc 1 182 1 view .LVU25
 188 0000 7047     		bx	lr
 189              		.cfi_endproc
 190              	.LFE148:
 192              		.section	.text.SysTick_Handler,"ax",%progbits
 193              		.align	1
 194              		.global	SysTick_Handler
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 199              	SysTick_Handler:
 200              	.LFB149:
 183:Core/Src/stm32f7xx_it.c **** 
 184:Core/Src/stm32f7xx_it.c **** /**
 185:Core/Src/stm32f7xx_it.c ****   * @brief This function handles System tick timer.
 186:Core/Src/stm32f7xx_it.c ****   */
 187:Core/Src/stm32f7xx_it.c **** void SysTick_Handler(void)
 188:Core/Src/stm32f7xx_it.c **** {
 201              		.loc 1 188 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205 0000 08B5     		push	{r3, lr}
 206              	.LCFI0:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 3, -8
 209              		.cfi_offset 14, -4
 189:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 190:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 191:Core/Src/stm32f7xx_it.c ****   HAL_IncTick();
 210              		.loc 1 191 3 view .LVU27
 211 0002 FFF7FEFF 		bl	HAL_IncTick
 212              	.LVL0:
 192:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 193:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 194:Core/Src/stm32f7xx_it.c **** }
 213              		.loc 1 194 1 is_stmt 0 view .LVU28
 214 0006 08BD     		pop	{r3, pc}
 215              		.cfi_endproc
 216              	.LFE149:
 218              		.section	.text.TIM1_UP_TIM10_IRQHandler,"ax",%progbits
ARM GAS  /tmp/ccpbkSkn.s 			page 8


 219              		.align	1
 220              		.global	TIM1_UP_TIM10_IRQHandler
 221              		.syntax unified
 222              		.thumb
 223              		.thumb_func
 225              	TIM1_UP_TIM10_IRQHandler:
 226              	.LFB150:
 195:Core/Src/stm32f7xx_it.c **** 
 196:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
 197:Core/Src/stm32f7xx_it.c **** /* STM32F7xx Peripheral Interrupt Handlers                                    */
 198:Core/Src/stm32f7xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 199:Core/Src/stm32f7xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 200:Core/Src/stm32f7xx_it.c **** /* please refer to the startup file (startup_stm32f7xx.s).                    */
 201:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
 202:Core/Src/stm32f7xx_it.c **** 
 203:Core/Src/stm32f7xx_it.c **** /**
 204:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 205:Core/Src/stm32f7xx_it.c ****   */
 206:Core/Src/stm32f7xx_it.c **** void TIM1_UP_TIM10_IRQHandler(void)
 207:Core/Src/stm32f7xx_it.c **** {
 227              		.loc 1 207 1 is_stmt 1 view -0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231 0000 08B5     		push	{r3, lr}
 232              	.LCFI1:
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 3, -8
 235              		.cfi_offset 14, -4
 208:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
 209:Core/Src/stm32f7xx_it.c **** 
 210:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
 211:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 236              		.loc 1 211 3 view .LVU30
 237 0002 0248     		ldr	r0, .L18
 238 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 239              	.LVL1:
 212:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
 213:Core/Src/stm32f7xx_it.c **** 
 214:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
 215:Core/Src/stm32f7xx_it.c **** }
 240              		.loc 1 215 1 is_stmt 0 view .LVU31
 241 0008 08BD     		pop	{r3, pc}
 242              	.L19:
 243 000a 00BF     		.align	2
 244              	.L18:
 245 000c 00000000 		.word	htim1
 246              		.cfi_endproc
 247              	.LFE150:
 249              		.section	.text.TIM1_CC_IRQHandler,"ax",%progbits
 250              		.align	1
 251              		.global	TIM1_CC_IRQHandler
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 256              	TIM1_CC_IRQHandler:
 257              	.LFB151:
ARM GAS  /tmp/ccpbkSkn.s 			page 9


 216:Core/Src/stm32f7xx_it.c **** 
 217:Core/Src/stm32f7xx_it.c **** /**
 218:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM1 capture compare interrupt.
 219:Core/Src/stm32f7xx_it.c ****   */
 220:Core/Src/stm32f7xx_it.c **** void TIM1_CC_IRQHandler(void)
 221:Core/Src/stm32f7xx_it.c **** {
 258              		.loc 1 221 1 is_stmt 1 view -0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262 0000 08B5     		push	{r3, lr}
 263              	.LCFI2:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 3, -8
 266              		.cfi_offset 14, -4
 222:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM1_CC_IRQn 0 */
 223:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM1_CC_IRQn 0 */
 224:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 267              		.loc 1 224 3 view .LVU33
 268 0002 0248     		ldr	r0, .L22
 269 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 270              	.LVL2:
 225:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 226:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM1_CC_IRQn 1 */
 227:Core/Src/stm32f7xx_it.c **** }
 271              		.loc 1 227 1 is_stmt 0 view .LVU34
 272 0008 08BD     		pop	{r3, pc}
 273              	.L23:
 274 000a 00BF     		.align	2
 275              	.L22:
 276 000c 00000000 		.word	htim1
 277              		.cfi_endproc
 278              	.LFE151:
 280              		.global	__aeabi_dadd
 281              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 282              		.align	1
 283              		.global	TIM6_DAC_IRQHandler
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 288              	TIM6_DAC_IRQHandler:
 289              	.LFB152:
 228:Core/Src/stm32f7xx_it.c **** 
 229:Core/Src/stm32f7xx_it.c **** /**
 230:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
 231:Core/Src/stm32f7xx_it.c ****   */
 232:Core/Src/stm32f7xx_it.c **** void TIM6_DAC_IRQHandler(void)
 233:Core/Src/stm32f7xx_it.c **** {
 290              		.loc 1 233 1 is_stmt 1 view -0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294 0000 10B5     		push	{r4, lr}
 295              	.LCFI3:
 296              		.cfi_def_cfa_offset 8
 297              		.cfi_offset 4, -8
 298              		.cfi_offset 14, -4
ARM GAS  /tmp/ccpbkSkn.s 			page 10


 234:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
 235:Core/Src/stm32f7xx_it.c **** 
 236:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 0 */
 237:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim6);
 299              		.loc 1 237 3 view .LVU36
 300 0002 0748     		ldr	r0, .L26
 301 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 302              	.LVL3:
 238:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
 239:Core/Src/stm32f7xx_it.c ****   system_status_led_angle += SYSTEM_STATUS_DEGREE_INCREMENT;
 303              		.loc 1 239 3 view .LVU37
 304              		.loc 1 239 27 is_stmt 0 view .LVU38
 305 0008 064C     		ldr	r4, .L26+4
 306 000a 074B     		ldr	r3, .L26+8
 307 000c D3E90023 		ldrd	r2, [r3]
 308 0010 D4E90001 		ldrd	r0, [r4]
 309 0014 FFF7FEFF 		bl	__aeabi_dadd
 310              	.LVL4:
 311 0018 C4E90001 		strd	r0, [r4]
 240:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 1 */
 241:Core/Src/stm32f7xx_it.c **** }
 312              		.loc 1 241 1 view .LVU39
 313 001c 10BD     		pop	{r4, pc}
 314              	.L27:
 315 001e 00BF     		.align	2
 316              	.L26:
 317 0020 00000000 		.word	htim6
 318 0024 00000000 		.word	system_status_led_angle
 319 0028 00000000 		.word	SYSTEM_STATUS_DEGREE_INCREMENT
 320              		.cfi_endproc
 321              	.LFE152:
 323              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 324              		.align	1
 325              		.global	TIM7_IRQHandler
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 330              	TIM7_IRQHandler:
 331              	.LFB153:
 242:Core/Src/stm32f7xx_it.c **** 
 243:Core/Src/stm32f7xx_it.c **** /**
 244:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM7 global interrupt.
 245:Core/Src/stm32f7xx_it.c ****   */
 246:Core/Src/stm32f7xx_it.c **** void TIM7_IRQHandler(void)
 247:Core/Src/stm32f7xx_it.c **** {
 332              		.loc 1 247 1 is_stmt 1 view -0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336 0000 08B5     		push	{r3, lr}
 337              	.LCFI4:
 338              		.cfi_def_cfa_offset 8
 339              		.cfi_offset 3, -8
 340              		.cfi_offset 14, -4
 248:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 0 */
 249:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM7_IRQn 0 */
 250:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim7);
ARM GAS  /tmp/ccpbkSkn.s 			page 11


 341              		.loc 1 250 3 view .LVU41
 342 0002 0248     		ldr	r0, .L30
 343 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 344              	.LVL5:
 251:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 1 */
 252:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM7_IRQn 1 */
 253:Core/Src/stm32f7xx_it.c **** }
 345              		.loc 1 253 1 is_stmt 0 view .LVU42
 346 0008 08BD     		pop	{r3, pc}
 347              	.L31:
 348 000a 00BF     		.align	2
 349              	.L30:
 350 000c 00000000 		.word	htim7
 351              		.cfi_endproc
 352              	.LFE153:
 354              		.section	.text.OTG_HS_IRQHandler,"ax",%progbits
 355              		.align	1
 356              		.global	OTG_HS_IRQHandler
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 361              	OTG_HS_IRQHandler:
 362              	.LFB154:
 254:Core/Src/stm32f7xx_it.c **** 
 255:Core/Src/stm32f7xx_it.c **** /**
 256:Core/Src/stm32f7xx_it.c ****   * @brief This function handles USB On The Go HS global interrupt.
 257:Core/Src/stm32f7xx_it.c ****   */
 258:Core/Src/stm32f7xx_it.c **** void OTG_HS_IRQHandler(void)
 259:Core/Src/stm32f7xx_it.c **** {
 363              		.loc 1 259 1 is_stmt 1 view -0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367 0000 08B5     		push	{r3, lr}
 368              	.LCFI5:
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 3, -8
 371              		.cfi_offset 14, -4
 260:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN OTG_HS_IRQn 0 */
 261:Core/Src/stm32f7xx_it.c **** 
 262:Core/Src/stm32f7xx_it.c ****   /* USER CODE END OTG_HS_IRQn 0 */
 263:Core/Src/stm32f7xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 372              		.loc 1 263 3 view .LVU44
 373 0002 0248     		ldr	r0, .L34
 374 0004 FFF7FEFF 		bl	HAL_PCD_IRQHandler
 375              	.LVL6:
 264:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN OTG_HS_IRQn 1 */
 265:Core/Src/stm32f7xx_it.c **** 
 266:Core/Src/stm32f7xx_it.c ****   /* USER CODE END OTG_HS_IRQn 1 */
 267:Core/Src/stm32f7xx_it.c **** }
 376              		.loc 1 267 1 is_stmt 0 view .LVU45
 377 0008 08BD     		pop	{r3, pc}
 378              	.L35:
 379 000a 00BF     		.align	2
 380              	.L34:
 381 000c 00000000 		.word	hpcd_USB_OTG_HS
 382              		.cfi_endproc
ARM GAS  /tmp/ccpbkSkn.s 			page 12


 383              	.LFE154:
 385              		.text
 386              	.Letext0:
 387              		.file 2 "/opt/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 388              		.file 3 "/opt/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 389              		.file 4 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f723xx.h"
 390              		.file 5 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 391              		.file 6 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 392              		.file 7 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 393              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_usb.h"
 394              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pcd.h"
 395              		.file 10 "Core/Inc/nyan_leds.h"
 396              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccpbkSkn.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_it.c
     /tmp/ccpbkSkn.s:20     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccpbkSkn.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccpbkSkn.s:44     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccpbkSkn.s:50     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccpbkSkn.s:67     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccpbkSkn.s:73     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccpbkSkn.s:90     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccpbkSkn.s:96     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccpbkSkn.s:113    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccpbkSkn.s:119    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccpbkSkn.s:136    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccpbkSkn.s:142    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccpbkSkn.s:155    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccpbkSkn.s:161    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccpbkSkn.s:174    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccpbkSkn.s:180    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccpbkSkn.s:193    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccpbkSkn.s:199    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccpbkSkn.s:219    .text.TIM1_UP_TIM10_IRQHandler:0000000000000000 $t
     /tmp/ccpbkSkn.s:225    .text.TIM1_UP_TIM10_IRQHandler:0000000000000000 TIM1_UP_TIM10_IRQHandler
     /tmp/ccpbkSkn.s:245    .text.TIM1_UP_TIM10_IRQHandler:000000000000000c $d
     /tmp/ccpbkSkn.s:250    .text.TIM1_CC_IRQHandler:0000000000000000 $t
     /tmp/ccpbkSkn.s:256    .text.TIM1_CC_IRQHandler:0000000000000000 TIM1_CC_IRQHandler
     /tmp/ccpbkSkn.s:276    .text.TIM1_CC_IRQHandler:000000000000000c $d
     /tmp/ccpbkSkn.s:282    .text.TIM6_DAC_IRQHandler:0000000000000000 $t
     /tmp/ccpbkSkn.s:288    .text.TIM6_DAC_IRQHandler:0000000000000000 TIM6_DAC_IRQHandler
     /tmp/ccpbkSkn.s:317    .text.TIM6_DAC_IRQHandler:0000000000000020 $d
     /tmp/ccpbkSkn.s:324    .text.TIM7_IRQHandler:0000000000000000 $t
     /tmp/ccpbkSkn.s:330    .text.TIM7_IRQHandler:0000000000000000 TIM7_IRQHandler
     /tmp/ccpbkSkn.s:350    .text.TIM7_IRQHandler:000000000000000c $d
     /tmp/ccpbkSkn.s:355    .text.OTG_HS_IRQHandler:0000000000000000 $t
     /tmp/ccpbkSkn.s:361    .text.OTG_HS_IRQHandler:0000000000000000 OTG_HS_IRQHandler
     /tmp/ccpbkSkn.s:381    .text.OTG_HS_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_TIM_IRQHandler
htim1
__aeabi_dadd
htim6
system_status_led_angle
SYSTEM_STATUS_DEGREE_INCREMENT
htim7
HAL_PCD_IRQHandler
hpcd_USB_OTG_HS
