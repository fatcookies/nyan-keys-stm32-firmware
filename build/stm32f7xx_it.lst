ARM GAS  /tmp/cc8EUjVO.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f7xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/stm32f7xx_it.c"
  20              		.section	.text.NMI_Handler,"ax",%progbits
  21              		.align	1
  22              		.global	NMI_Handler
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	NMI_Handler:
  28              	.LFB144:
   1:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f7xx_it.c **** /**
   3:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f7xx_it.c ****   * @file    stm32f7xx_it.c
   5:Core/Src/stm32f7xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f7xx_it.c ****   * @attention
   8:Core/Src/stm32f7xx_it.c ****   *
   9:Core/Src/stm32f7xx_it.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/stm32f7xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f7xx_it.c ****   *
  12:Core/Src/stm32f7xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f7xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f7xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f7xx_it.c ****   *
  16:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f7xx_it.c ****   */
  18:Core/Src/stm32f7xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f7xx_it.c **** 
  20:Core/Src/stm32f7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f7xx_it.c **** #include "main.h"
  22:Core/Src/stm32f7xx_it.c **** #include "stm32f7xx_it.h"
  23:Core/Src/stm32f7xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32f7xx_it.c **** #include "nyan_os.h"
  26:Core/Src/stm32f7xx_it.c **** #include "nyan_leds.h"
  27:Core/Src/stm32f7xx_it.c **** /* USER CODE END Includes */
  28:Core/Src/stm32f7xx_it.c **** 
  29:Core/Src/stm32f7xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN TD */
ARM GAS  /tmp/cc8EUjVO.s 			page 2


  31:Core/Src/stm32f7xx_it.c **** 
  32:Core/Src/stm32f7xx_it.c **** /* USER CODE END TD */
  33:Core/Src/stm32f7xx_it.c **** 
  34:Core/Src/stm32f7xx_it.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PD */
  36:Core/Src/stm32f7xx_it.c **** 
  37:Core/Src/stm32f7xx_it.c **** /* USER CODE END PD */
  38:Core/Src/stm32f7xx_it.c **** 
  39:Core/Src/stm32f7xx_it.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PM */
  41:Core/Src/stm32f7xx_it.c **** 
  42:Core/Src/stm32f7xx_it.c **** /* USER CODE END PM */
  43:Core/Src/stm32f7xx_it.c **** 
  44:Core/Src/stm32f7xx_it.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PV */
  46:Core/Src/stm32f7xx_it.c **** 
  47:Core/Src/stm32f7xx_it.c **** /* USER CODE END PV */
  48:Core/Src/stm32f7xx_it.c **** 
  49:Core/Src/stm32f7xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  50:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PFP */
  51:Core/Src/stm32f7xx_it.c **** 
  52:Core/Src/stm32f7xx_it.c **** /* USER CODE END PFP */
  53:Core/Src/stm32f7xx_it.c **** 
  54:Core/Src/stm32f7xx_it.c **** /* Private user code ---------------------------------------------------------*/
  55:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN 0 */
  56:Core/Src/stm32f7xx_it.c **** 
  57:Core/Src/stm32f7xx_it.c **** /* USER CODE END 0 */
  58:Core/Src/stm32f7xx_it.c **** 
  59:Core/Src/stm32f7xx_it.c **** /* External variables --------------------------------------------------------*/
  60:Core/Src/stm32f7xx_it.c **** extern DMA_HandleTypeDef hdma_i2c1_rx;
  61:Core/Src/stm32f7xx_it.c **** extern DMA_HandleTypeDef hdma_i2c1_tx;
  62:Core/Src/stm32f7xx_it.c **** extern I2C_HandleTypeDef hi2c1;
  63:Core/Src/stm32f7xx_it.c **** extern DMA_HandleTypeDef hdma_spi2_rx;
  64:Core/Src/stm32f7xx_it.c **** extern DMA_HandleTypeDef hdma_spi2_tx;
  65:Core/Src/stm32f7xx_it.c **** extern SPI_HandleTypeDef hspi2;
  66:Core/Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim1;
  67:Core/Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim6;
  68:Core/Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim7;
  69:Core/Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim8;
  70:Core/Src/stm32f7xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_OTG_HS;
  71:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN EV */
  72:Core/Src/stm32f7xx_it.c **** extern NyanOS nos;
  73:Core/Src/stm32f7xx_it.c **** extern double system_status_led_angle;
  74:Core/Src/stm32f7xx_it.c **** /* USER CODE END EV */
  75:Core/Src/stm32f7xx_it.c **** 
  76:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
  77:Core/Src/stm32f7xx_it.c **** /*           Cortex-M7 Processor Interruption and Exception Handlers          */
  78:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
  79:Core/Src/stm32f7xx_it.c **** /**
  80:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Non maskable interrupt.
  81:Core/Src/stm32f7xx_it.c ****   */
  82:Core/Src/stm32f7xx_it.c **** void NMI_Handler(void)
  83:Core/Src/stm32f7xx_it.c **** {
  29              		.loc 1 83 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc8EUjVO.s 			page 3


  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  84:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  85:Core/Src/stm32f7xx_it.c **** 
  86:Core/Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  87:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  88:Core/Src/stm32f7xx_it.c ****   while (1)
  36              		.loc 1 88 3 discriminator 1 view .LVU1
  89:Core/Src/stm32f7xx_it.c ****   {
  90:Core/Src/stm32f7xx_it.c ****   }
  37              		.loc 1 90 3 discriminator 1 view .LVU2
  88:Core/Src/stm32f7xx_it.c ****   {
  38              		.loc 1 88 9 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE144:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  50              	HardFault_Handler:
  51              	.LFB145:
  91:Core/Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  92:Core/Src/stm32f7xx_it.c **** }
  93:Core/Src/stm32f7xx_it.c **** 
  94:Core/Src/stm32f7xx_it.c **** /**
  95:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Hard fault interrupt.
  96:Core/Src/stm32f7xx_it.c ****   */
  97:Core/Src/stm32f7xx_it.c **** void HardFault_Handler(void)
  98:Core/Src/stm32f7xx_it.c **** {
  52              		.loc 1 98 1 view -0
  53              		.cfi_startproc
  54              		@ Volatile: function does not return.
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57 0000 08B5     		push	{r3, lr}
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 3, -8
  60              		.cfi_offset 14, -4
  61              	.L4:
  99:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 100:Core/Src/stm32f7xx_it.c **** 
 101:Core/Src/stm32f7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 102:Core/Src/stm32f7xx_it.c ****   while (1)
  62              		.loc 1 102 3 discriminator 1 view .LVU5
 103:Core/Src/stm32f7xx_it.c ****   {
 104:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 105:Core/Src/stm32f7xx_it.c ****     HAL_GPIO_WritePin(GPIOD, Nyan_Keys_LED0_Pin, GPIO_PIN_SET);
  63              		.loc 1 105 5 discriminator 1 view .LVU6
  64 0002 0D4C     		ldr	r4, .L6
  65 0004 0122     		movs	r2, #1
  66 0006 1146     		mov	r1, r2
  67 0008 2046     		mov	r0, r4
  68 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/cc8EUjVO.s 			page 4


  69              	.LVL0:
 106:Core/Src/stm32f7xx_it.c ****     HAL_GPIO_WritePin(GPIOD, Nyan_Keys_LED1_Pin, GPIO_PIN_SET);
  70              		.loc 1 106 5 discriminator 1 view .LVU7
  71 000e 0122     		movs	r2, #1
  72 0010 0221     		movs	r1, #2
  73 0012 2046     		mov	r0, r4
  74 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
  75              	.LVL1:
 107:Core/Src/stm32f7xx_it.c ****     HAL_GPIO_WritePin(GPIOD, Nyan_Keys_LED2_Pin, GPIO_PIN_SET);
  76              		.loc 1 107 5 discriminator 1 view .LVU8
  77 0018 0122     		movs	r2, #1
  78 001a 0421     		movs	r1, #4
  79 001c 2046     		mov	r0, r4
  80 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
  81              	.LVL2:
 108:Core/Src/stm32f7xx_it.c ****     HAL_GPIO_WritePin(GPIOD, Nyan_Keys_LED3_Pin, GPIO_PIN_SET);
  82              		.loc 1 108 5 discriminator 1 view .LVU9
  83 0022 0122     		movs	r2, #1
  84 0024 0821     		movs	r1, #8
  85 0026 2046     		mov	r0, r4
  86 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
  87              	.LVL3:
 109:Core/Src/stm32f7xx_it.c ****     HAL_GPIO_WritePin(GPIOD, Nyan_Keys_LED4_Pin, GPIO_PIN_SET);
  88              		.loc 1 109 5 discriminator 1 view .LVU10
  89 002c 0122     		movs	r2, #1
  90 002e 1021     		movs	r1, #16
  91 0030 2046     		mov	r0, r4
  92 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
  93              	.LVL4:
 102:Core/Src/stm32f7xx_it.c ****   {
  94              		.loc 1 102 9 discriminator 1 view .LVU11
  95 0036 E4E7     		b	.L4
  96              	.L7:
  97              		.align	2
  98              	.L6:
  99 0038 000C0240 		.word	1073875968
 100              		.cfi_endproc
 101              	.LFE145:
 103              		.section	.text.MemManage_Handler,"ax",%progbits
 104              		.align	1
 105              		.global	MemManage_Handler
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 110              	MemManage_Handler:
 111              	.LFB146:
 110:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 111:Core/Src/stm32f7xx_it.c ****   }
 112:Core/Src/stm32f7xx_it.c **** }
 113:Core/Src/stm32f7xx_it.c **** 
 114:Core/Src/stm32f7xx_it.c **** /**
 115:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Memory management fault.
 116:Core/Src/stm32f7xx_it.c ****   */
 117:Core/Src/stm32f7xx_it.c **** void MemManage_Handler(void)
 118:Core/Src/stm32f7xx_it.c **** {
 112              		.loc 1 118 1 view -0
 113              		.cfi_startproc
ARM GAS  /tmp/cc8EUjVO.s 			page 5


 114              		@ Volatile: function does not return.
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.L9:
 119:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 120:Core/Src/stm32f7xx_it.c **** 
 121:Core/Src/stm32f7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 122:Core/Src/stm32f7xx_it.c ****   while (1)
 119              		.loc 1 122 3 discriminator 1 view .LVU13
 123:Core/Src/stm32f7xx_it.c ****   {
 124:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 125:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 126:Core/Src/stm32f7xx_it.c ****   }
 120              		.loc 1 126 3 discriminator 1 view .LVU14
 122:Core/Src/stm32f7xx_it.c ****   {
 121              		.loc 1 122 9 discriminator 1 view .LVU15
 122 0000 FEE7     		b	.L9
 123              		.cfi_endproc
 124              	.LFE146:
 126              		.section	.text.BusFault_Handler,"ax",%progbits
 127              		.align	1
 128              		.global	BusFault_Handler
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 133              	BusFault_Handler:
 134              	.LFB147:
 127:Core/Src/stm32f7xx_it.c **** }
 128:Core/Src/stm32f7xx_it.c **** 
 129:Core/Src/stm32f7xx_it.c **** /**
 130:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 131:Core/Src/stm32f7xx_it.c ****   */
 132:Core/Src/stm32f7xx_it.c **** void BusFault_Handler(void)
 133:Core/Src/stm32f7xx_it.c **** {
 135              		.loc 1 133 1 view -0
 136              		.cfi_startproc
 137              		@ Volatile: function does not return.
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141              	.L11:
 134:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 135:Core/Src/stm32f7xx_it.c **** 
 136:Core/Src/stm32f7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 137:Core/Src/stm32f7xx_it.c ****   while (1)
 142              		.loc 1 137 3 discriminator 1 view .LVU17
 138:Core/Src/stm32f7xx_it.c ****   {
 139:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 140:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 141:Core/Src/stm32f7xx_it.c ****   }
 143              		.loc 1 141 3 discriminator 1 view .LVU18
 137:Core/Src/stm32f7xx_it.c ****   {
 144              		.loc 1 137 9 discriminator 1 view .LVU19
 145 0000 FEE7     		b	.L11
 146              		.cfi_endproc
 147              	.LFE147:
ARM GAS  /tmp/cc8EUjVO.s 			page 6


 149              		.section	.text.UsageFault_Handler,"ax",%progbits
 150              		.align	1
 151              		.global	UsageFault_Handler
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 156              	UsageFault_Handler:
 157              	.LFB148:
 142:Core/Src/stm32f7xx_it.c **** }
 143:Core/Src/stm32f7xx_it.c **** 
 144:Core/Src/stm32f7xx_it.c **** /**
 145:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 146:Core/Src/stm32f7xx_it.c ****   */
 147:Core/Src/stm32f7xx_it.c **** void UsageFault_Handler(void)
 148:Core/Src/stm32f7xx_it.c **** {
 158              		.loc 1 148 1 view -0
 159              		.cfi_startproc
 160              		@ Volatile: function does not return.
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 164              	.L13:
 149:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 150:Core/Src/stm32f7xx_it.c **** 
 151:Core/Src/stm32f7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 152:Core/Src/stm32f7xx_it.c ****   while (1)
 165              		.loc 1 152 3 discriminator 1 view .LVU21
 153:Core/Src/stm32f7xx_it.c ****   {
 154:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 155:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 156:Core/Src/stm32f7xx_it.c ****   }
 166              		.loc 1 156 3 discriminator 1 view .LVU22
 152:Core/Src/stm32f7xx_it.c ****   {
 167              		.loc 1 152 9 discriminator 1 view .LVU23
 168 0000 FEE7     		b	.L13
 169              		.cfi_endproc
 170              	.LFE148:
 172              		.section	.text.SVC_Handler,"ax",%progbits
 173              		.align	1
 174              		.global	SVC_Handler
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 179              	SVC_Handler:
 180              	.LFB149:
 157:Core/Src/stm32f7xx_it.c **** }
 158:Core/Src/stm32f7xx_it.c **** 
 159:Core/Src/stm32f7xx_it.c **** /**
 160:Core/Src/stm32f7xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 161:Core/Src/stm32f7xx_it.c ****   */
 162:Core/Src/stm32f7xx_it.c **** void SVC_Handler(void)
 163:Core/Src/stm32f7xx_it.c **** {
 181              		.loc 1 163 1 view -0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		@ link register save eliminated.
ARM GAS  /tmp/cc8EUjVO.s 			page 7


 164:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 165:Core/Src/stm32f7xx_it.c **** 
 166:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 167:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 168:Core/Src/stm32f7xx_it.c **** 
 169:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 170:Core/Src/stm32f7xx_it.c **** }
 186              		.loc 1 170 1 view .LVU25
 187 0000 7047     		bx	lr
 188              		.cfi_endproc
 189              	.LFE149:
 191              		.section	.text.DebugMon_Handler,"ax",%progbits
 192              		.align	1
 193              		.global	DebugMon_Handler
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 198              	DebugMon_Handler:
 199              	.LFB150:
 171:Core/Src/stm32f7xx_it.c **** 
 172:Core/Src/stm32f7xx_it.c **** /**
 173:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Debug monitor.
 174:Core/Src/stm32f7xx_it.c ****   */
 175:Core/Src/stm32f7xx_it.c **** void DebugMon_Handler(void)
 176:Core/Src/stm32f7xx_it.c **** {
 200              		.loc 1 176 1 view -0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 177:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 178:Core/Src/stm32f7xx_it.c **** 
 179:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 180:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 181:Core/Src/stm32f7xx_it.c **** 
 182:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 183:Core/Src/stm32f7xx_it.c **** }
 205              		.loc 1 183 1 view .LVU27
 206 0000 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE150:
 210              		.section	.text.PendSV_Handler,"ax",%progbits
 211              		.align	1
 212              		.global	PendSV_Handler
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
 217              	PendSV_Handler:
 218              	.LFB151:
 184:Core/Src/stm32f7xx_it.c **** 
 185:Core/Src/stm32f7xx_it.c **** /**
 186:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Pendable request for system service.
 187:Core/Src/stm32f7xx_it.c ****   */
 188:Core/Src/stm32f7xx_it.c **** void PendSV_Handler(void)
 189:Core/Src/stm32f7xx_it.c **** {
 219              		.loc 1 189 1 view -0
 220              		.cfi_startproc
ARM GAS  /tmp/cc8EUjVO.s 			page 8


 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              		@ link register save eliminated.
 190:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 191:Core/Src/stm32f7xx_it.c **** 
 192:Core/Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 193:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 194:Core/Src/stm32f7xx_it.c **** 
 195:Core/Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 196:Core/Src/stm32f7xx_it.c **** }
 224              		.loc 1 196 1 view .LVU29
 225 0000 7047     		bx	lr
 226              		.cfi_endproc
 227              	.LFE151:
 229              		.section	.text.SysTick_Handler,"ax",%progbits
 230              		.align	1
 231              		.global	SysTick_Handler
 232              		.syntax unified
 233              		.thumb
 234              		.thumb_func
 236              	SysTick_Handler:
 237              	.LFB152:
 197:Core/Src/stm32f7xx_it.c **** 
 198:Core/Src/stm32f7xx_it.c **** /**
 199:Core/Src/stm32f7xx_it.c ****   * @brief This function handles System tick timer.
 200:Core/Src/stm32f7xx_it.c ****   */
 201:Core/Src/stm32f7xx_it.c **** void SysTick_Handler(void)
 202:Core/Src/stm32f7xx_it.c **** {
 238              		.loc 1 202 1 view -0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242 0000 08B5     		push	{r3, lr}
 243              		.cfi_def_cfa_offset 8
 244              		.cfi_offset 3, -8
 245              		.cfi_offset 14, -4
 203:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 204:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 205:Core/Src/stm32f7xx_it.c ****   HAL_IncTick();
 246              		.loc 1 205 3 view .LVU31
 247 0002 FFF7FEFF 		bl	HAL_IncTick
 248              	.LVL5:
 206:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 207:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 208:Core/Src/stm32f7xx_it.c **** }
 249              		.loc 1 208 1 is_stmt 0 view .LVU32
 250 0006 08BD     		pop	{r3, pc}
 251              		.cfi_endproc
 252              	.LFE152:
 254              		.section	.text.DMA1_Stream0_IRQHandler,"ax",%progbits
 255              		.align	1
 256              		.global	DMA1_Stream0_IRQHandler
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 261              	DMA1_Stream0_IRQHandler:
 262              	.LFB153:
ARM GAS  /tmp/cc8EUjVO.s 			page 9


 209:Core/Src/stm32f7xx_it.c **** 
 210:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
 211:Core/Src/stm32f7xx_it.c **** /* STM32F7xx Peripheral Interrupt Handlers                                    */
 212:Core/Src/stm32f7xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 213:Core/Src/stm32f7xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 214:Core/Src/stm32f7xx_it.c **** /* please refer to the startup file (startup_stm32f7xx.s).                    */
 215:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
 216:Core/Src/stm32f7xx_it.c **** 
 217:Core/Src/stm32f7xx_it.c **** /**
 218:Core/Src/stm32f7xx_it.c ****   * @brief This function handles DMA1 stream0 global interrupt.
 219:Core/Src/stm32f7xx_it.c ****   */
 220:Core/Src/stm32f7xx_it.c **** void DMA1_Stream0_IRQHandler(void)
 221:Core/Src/stm32f7xx_it.c **** {
 263              		.loc 1 221 1 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267 0000 08B5     		push	{r3, lr}
 268              		.cfi_def_cfa_offset 8
 269              		.cfi_offset 3, -8
 270              		.cfi_offset 14, -4
 222:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
 223:Core/Src/stm32f7xx_it.c **** 
 224:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream0_IRQn 0 */
 225:Core/Src/stm32f7xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 271              		.loc 1 225 3 view .LVU34
 272 0002 0248     		ldr	r0, .L21
 273 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 274              	.LVL6:
 226:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
 227:Core/Src/stm32f7xx_it.c **** 
 228:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream0_IRQn 1 */
 229:Core/Src/stm32f7xx_it.c **** }
 275              		.loc 1 229 1 is_stmt 0 view .LVU35
 276 0008 08BD     		pop	{r3, pc}
 277              	.L22:
 278 000a 00BF     		.align	2
 279              	.L21:
 280 000c 00000000 		.word	hdma_i2c1_rx
 281              		.cfi_endproc
 282              	.LFE153:
 284              		.section	.text.DMA1_Stream3_IRQHandler,"ax",%progbits
 285              		.align	1
 286              		.global	DMA1_Stream3_IRQHandler
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 291              	DMA1_Stream3_IRQHandler:
 292              	.LFB154:
 230:Core/Src/stm32f7xx_it.c **** 
 231:Core/Src/stm32f7xx_it.c **** /**
 232:Core/Src/stm32f7xx_it.c ****   * @brief This function handles DMA1 stream3 global interrupt.
 233:Core/Src/stm32f7xx_it.c ****   */
 234:Core/Src/stm32f7xx_it.c **** void DMA1_Stream3_IRQHandler(void)
 235:Core/Src/stm32f7xx_it.c **** {
 293              		.loc 1 235 1 is_stmt 1 view -0
 294              		.cfi_startproc
ARM GAS  /tmp/cc8EUjVO.s 			page 10


 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297 0000 08B5     		push	{r3, lr}
 298              		.cfi_def_cfa_offset 8
 299              		.cfi_offset 3, -8
 300              		.cfi_offset 14, -4
 236:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
 237:Core/Src/stm32f7xx_it.c **** 
 238:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream3_IRQn 0 */
 239:Core/Src/stm32f7xx_it.c ****   HAL_DMA_IRQHandler(&hdma_spi2_rx);
 301              		.loc 1 239 3 view .LVU37
 302 0002 0248     		ldr	r0, .L25
 303 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 304              	.LVL7:
 240:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */
 241:Core/Src/stm32f7xx_it.c **** 
 242:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream3_IRQn 1 */
 243:Core/Src/stm32f7xx_it.c **** }
 305              		.loc 1 243 1 is_stmt 0 view .LVU38
 306 0008 08BD     		pop	{r3, pc}
 307              	.L26:
 308 000a 00BF     		.align	2
 309              	.L25:
 310 000c 00000000 		.word	hdma_spi2_rx
 311              		.cfi_endproc
 312              	.LFE154:
 314              		.section	.text.DMA1_Stream4_IRQHandler,"ax",%progbits
 315              		.align	1
 316              		.global	DMA1_Stream4_IRQHandler
 317              		.syntax unified
 318              		.thumb
 319              		.thumb_func
 321              	DMA1_Stream4_IRQHandler:
 322              	.LFB155:
 244:Core/Src/stm32f7xx_it.c **** 
 245:Core/Src/stm32f7xx_it.c **** /**
 246:Core/Src/stm32f7xx_it.c ****   * @brief This function handles DMA1 stream4 global interrupt.
 247:Core/Src/stm32f7xx_it.c ****   */
 248:Core/Src/stm32f7xx_it.c **** void DMA1_Stream4_IRQHandler(void)
 249:Core/Src/stm32f7xx_it.c **** {
 323              		.loc 1 249 1 is_stmt 1 view -0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327 0000 08B5     		push	{r3, lr}
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 3, -8
 330              		.cfi_offset 14, -4
 250:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
 251:Core/Src/stm32f7xx_it.c **** 
 252:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream4_IRQn 0 */
 253:Core/Src/stm32f7xx_it.c ****   HAL_DMA_IRQHandler(&hdma_spi2_tx);
 331              		.loc 1 253 3 view .LVU40
 332 0002 0248     		ldr	r0, .L29
 333 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 334              	.LVL8:
 254:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */
ARM GAS  /tmp/cc8EUjVO.s 			page 11


 255:Core/Src/stm32f7xx_it.c **** 
 256:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream4_IRQn 1 */
 257:Core/Src/stm32f7xx_it.c **** }
 335              		.loc 1 257 1 is_stmt 0 view .LVU41
 336 0008 08BD     		pop	{r3, pc}
 337              	.L30:
 338 000a 00BF     		.align	2
 339              	.L29:
 340 000c 00000000 		.word	hdma_spi2_tx
 341              		.cfi_endproc
 342              	.LFE155:
 344              		.section	.text.DMA1_Stream6_IRQHandler,"ax",%progbits
 345              		.align	1
 346              		.global	DMA1_Stream6_IRQHandler
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 351              	DMA1_Stream6_IRQHandler:
 352              	.LFB156:
 258:Core/Src/stm32f7xx_it.c **** 
 259:Core/Src/stm32f7xx_it.c **** /**
 260:Core/Src/stm32f7xx_it.c ****   * @brief This function handles DMA1 stream6 global interrupt.
 261:Core/Src/stm32f7xx_it.c ****   */
 262:Core/Src/stm32f7xx_it.c **** void DMA1_Stream6_IRQHandler(void)
 263:Core/Src/stm32f7xx_it.c **** {
 353              		.loc 1 263 1 is_stmt 1 view -0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 08B5     		push	{r3, lr}
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 3, -8
 360              		.cfi_offset 14, -4
 264:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
 265:Core/Src/stm32f7xx_it.c **** 
 266:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream6_IRQn 0 */
 267:Core/Src/stm32f7xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 361              		.loc 1 267 3 view .LVU43
 362 0002 0248     		ldr	r0, .L33
 363 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 364              	.LVL9:
 268:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */
 269:Core/Src/stm32f7xx_it.c **** 
 270:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA1_Stream6_IRQn 1 */
 271:Core/Src/stm32f7xx_it.c **** }
 365              		.loc 1 271 1 is_stmt 0 view .LVU44
 366 0008 08BD     		pop	{r3, pc}
 367              	.L34:
 368 000a 00BF     		.align	2
 369              	.L33:
 370 000c 00000000 		.word	hdma_i2c1_tx
 371              		.cfi_endproc
 372              	.LFE156:
 374              		.section	.text.TIM1_UP_TIM10_IRQHandler,"ax",%progbits
 375              		.align	1
 376              		.global	TIM1_UP_TIM10_IRQHandler
 377              		.syntax unified
ARM GAS  /tmp/cc8EUjVO.s 			page 12


 378              		.thumb
 379              		.thumb_func
 381              	TIM1_UP_TIM10_IRQHandler:
 382              	.LFB157:
 272:Core/Src/stm32f7xx_it.c **** 
 273:Core/Src/stm32f7xx_it.c **** /**
 274:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 275:Core/Src/stm32f7xx_it.c ****   */
 276:Core/Src/stm32f7xx_it.c **** void TIM1_UP_TIM10_IRQHandler(void)
 277:Core/Src/stm32f7xx_it.c **** {
 383              		.loc 1 277 1 is_stmt 1 view -0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387 0000 08B5     		push	{r3, lr}
 388              		.cfi_def_cfa_offset 8
 389              		.cfi_offset 3, -8
 390              		.cfi_offset 14, -4
 278:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
 279:Core/Src/stm32f7xx_it.c **** 
 280:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
 281:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 391              		.loc 1 281 3 view .LVU46
 392 0002 0248     		ldr	r0, .L37
 393 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 394              	.LVL10:
 282:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
 283:Core/Src/stm32f7xx_it.c **** 
 284:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
 285:Core/Src/stm32f7xx_it.c **** }
 395              		.loc 1 285 1 is_stmt 0 view .LVU47
 396 0008 08BD     		pop	{r3, pc}
 397              	.L38:
 398 000a 00BF     		.align	2
 399              	.L37:
 400 000c 00000000 		.word	htim1
 401              		.cfi_endproc
 402              	.LFE157:
 404              		.section	.text.TIM1_CC_IRQHandler,"ax",%progbits
 405              		.align	1
 406              		.global	TIM1_CC_IRQHandler
 407              		.syntax unified
 408              		.thumb
 409              		.thumb_func
 411              	TIM1_CC_IRQHandler:
 412              	.LFB158:
 286:Core/Src/stm32f7xx_it.c **** 
 287:Core/Src/stm32f7xx_it.c **** /**
 288:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM1 capture compare interrupt.
 289:Core/Src/stm32f7xx_it.c ****   */
 290:Core/Src/stm32f7xx_it.c **** void TIM1_CC_IRQHandler(void)
 291:Core/Src/stm32f7xx_it.c **** {
 413              		.loc 1 291 1 is_stmt 1 view -0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc8EUjVO.s 			page 13


 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 3, -8
 420              		.cfi_offset 14, -4
 292:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM1_CC_IRQn 0 */
 293:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM1_CC_IRQn 0 */
 294:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 421              		.loc 1 294 3 view .LVU49
 422 0002 0248     		ldr	r0, .L41
 423 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 424              	.LVL11:
 295:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 296:Core/Src/stm32f7xx_it.c ****   // This has be be in here, otherwise the system halts when using other timers !!!FIXME!!! Advance
 297:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM1_CC_IRQn 1 */
 298:Core/Src/stm32f7xx_it.c **** }
 425              		.loc 1 298 1 is_stmt 0 view .LVU50
 426 0008 08BD     		pop	{r3, pc}
 427              	.L42:
 428 000a 00BF     		.align	2
 429              	.L41:
 430 000c 00000000 		.word	htim1
 431              		.cfi_endproc
 432              	.LFE158:
 434              		.section	.text.I2C1_EV_IRQHandler,"ax",%progbits
 435              		.align	1
 436              		.global	I2C1_EV_IRQHandler
 437              		.syntax unified
 438              		.thumb
 439              		.thumb_func
 441              	I2C1_EV_IRQHandler:
 442              	.LFB159:
 299:Core/Src/stm32f7xx_it.c **** 
 300:Core/Src/stm32f7xx_it.c **** /**
 301:Core/Src/stm32f7xx_it.c ****   * @brief This function handles I2C1 event interrupt.
 302:Core/Src/stm32f7xx_it.c ****   */
 303:Core/Src/stm32f7xx_it.c **** void I2C1_EV_IRQHandler(void)
 304:Core/Src/stm32f7xx_it.c **** {
 443              		.loc 1 304 1 is_stmt 1 view -0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447 0000 08B5     		push	{r3, lr}
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 3, -8
 450              		.cfi_offset 14, -4
 305:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN I2C1_EV_IRQn 0 */
 306:Core/Src/stm32f7xx_it.c **** 
 307:Core/Src/stm32f7xx_it.c ****   /* USER CODE END I2C1_EV_IRQn 0 */
 308:Core/Src/stm32f7xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c1);
 451              		.loc 1 308 3 view .LVU52
 452 0002 0248     		ldr	r0, .L45
 453 0004 FFF7FEFF 		bl	HAL_I2C_EV_IRQHandler
 454              	.LVL12:
 309:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN I2C1_EV_IRQn 1 */
 310:Core/Src/stm32f7xx_it.c **** 
 311:Core/Src/stm32f7xx_it.c ****   /* USER CODE END I2C1_EV_IRQn 1 */
 312:Core/Src/stm32f7xx_it.c **** }
 455              		.loc 1 312 1 is_stmt 0 view .LVU53
ARM GAS  /tmp/cc8EUjVO.s 			page 14


 456 0008 08BD     		pop	{r3, pc}
 457              	.L46:
 458 000a 00BF     		.align	2
 459              	.L45:
 460 000c 00000000 		.word	hi2c1
 461              		.cfi_endproc
 462              	.LFE159:
 464              		.section	.text.I2C1_ER_IRQHandler,"ax",%progbits
 465              		.align	1
 466              		.global	I2C1_ER_IRQHandler
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 471              	I2C1_ER_IRQHandler:
 472              	.LFB160:
 313:Core/Src/stm32f7xx_it.c **** 
 314:Core/Src/stm32f7xx_it.c **** /**
 315:Core/Src/stm32f7xx_it.c ****   * @brief This function handles I2C1 error interrupt.
 316:Core/Src/stm32f7xx_it.c ****   */
 317:Core/Src/stm32f7xx_it.c **** void I2C1_ER_IRQHandler(void)
 318:Core/Src/stm32f7xx_it.c **** {
 473              		.loc 1 318 1 is_stmt 1 view -0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477 0000 08B5     		push	{r3, lr}
 478              		.cfi_def_cfa_offset 8
 479              		.cfi_offset 3, -8
 480              		.cfi_offset 14, -4
 319:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN I2C1_ER_IRQn 0 */
 320:Core/Src/stm32f7xx_it.c **** 
 321:Core/Src/stm32f7xx_it.c ****   /* USER CODE END I2C1_ER_IRQn 0 */
 322:Core/Src/stm32f7xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c1);
 481              		.loc 1 322 3 view .LVU55
 482 0002 0248     		ldr	r0, .L49
 483 0004 FFF7FEFF 		bl	HAL_I2C_ER_IRQHandler
 484              	.LVL13:
 323:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN I2C1_ER_IRQn 1 */
 324:Core/Src/stm32f7xx_it.c **** 
 325:Core/Src/stm32f7xx_it.c ****   /* USER CODE END I2C1_ER_IRQn 1 */
 326:Core/Src/stm32f7xx_it.c **** }
 485              		.loc 1 326 1 is_stmt 0 view .LVU56
 486 0008 08BD     		pop	{r3, pc}
 487              	.L50:
 488 000a 00BF     		.align	2
 489              	.L49:
 490 000c 00000000 		.word	hi2c1
 491              		.cfi_endproc
 492              	.LFE160:
 494              		.section	.text.SPI2_IRQHandler,"ax",%progbits
 495              		.align	1
 496              		.global	SPI2_IRQHandler
 497              		.syntax unified
 498              		.thumb
 499              		.thumb_func
 501              	SPI2_IRQHandler:
 502              	.LFB161:
ARM GAS  /tmp/cc8EUjVO.s 			page 15


 327:Core/Src/stm32f7xx_it.c **** 
 328:Core/Src/stm32f7xx_it.c **** /**
 329:Core/Src/stm32f7xx_it.c ****   * @brief This function handles SPI2 global interrupt.
 330:Core/Src/stm32f7xx_it.c ****   */
 331:Core/Src/stm32f7xx_it.c **** void SPI2_IRQHandler(void)
 332:Core/Src/stm32f7xx_it.c **** {
 503              		.loc 1 332 1 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507 0000 08B5     		push	{r3, lr}
 508              		.cfi_def_cfa_offset 8
 509              		.cfi_offset 3, -8
 510              		.cfi_offset 14, -4
 333:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SPI2_IRQn 0 */
 334:Core/Src/stm32f7xx_it.c **** 
 335:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SPI2_IRQn 0 */
 336:Core/Src/stm32f7xx_it.c ****   HAL_SPI_IRQHandler(&hspi2);
 511              		.loc 1 336 3 view .LVU58
 512 0002 0248     		ldr	r0, .L53
 513 0004 FFF7FEFF 		bl	HAL_SPI_IRQHandler
 514              	.LVL14:
 337:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SPI2_IRQn 1 */
 338:Core/Src/stm32f7xx_it.c **** 
 339:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SPI2_IRQn 1 */
 340:Core/Src/stm32f7xx_it.c **** }
 515              		.loc 1 340 1 is_stmt 0 view .LVU59
 516 0008 08BD     		pop	{r3, pc}
 517              	.L54:
 518 000a 00BF     		.align	2
 519              	.L53:
 520 000c 00000000 		.word	hspi2
 521              		.cfi_endproc
 522              	.LFE161:
 524              		.section	.text.TIM8_CC_IRQHandler,"ax",%progbits
 525              		.align	1
 526              		.global	TIM8_CC_IRQHandler
 527              		.syntax unified
 528              		.thumb
 529              		.thumb_func
 531              	TIM8_CC_IRQHandler:
 532              	.LFB162:
 341:Core/Src/stm32f7xx_it.c **** 
 342:Core/Src/stm32f7xx_it.c **** /**
 343:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM8 capture compare interrupt.
 344:Core/Src/stm32f7xx_it.c ****   */
 345:Core/Src/stm32f7xx_it.c **** void TIM8_CC_IRQHandler(void)
 346:Core/Src/stm32f7xx_it.c **** {
 533              		.loc 1 346 1 is_stmt 1 view -0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537 0000 08B5     		push	{r3, lr}
 538              		.cfi_def_cfa_offset 8
 539              		.cfi_offset 3, -8
 540              		.cfi_offset 14, -4
 347:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM8_CC_IRQn 0 */
ARM GAS  /tmp/cc8EUjVO.s 			page 16


 348:Core/Src/stm32f7xx_it.c **** 
 349:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM8_CC_IRQn 0 */
 350:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim8);
 541              		.loc 1 350 3 view .LVU61
 542 0002 0248     		ldr	r0, .L57
 543 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 544              	.LVL15:
 351:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM8_CC_IRQn 1 */
 352:Core/Src/stm32f7xx_it.c **** 
 353:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM8_CC_IRQn 1 */
 354:Core/Src/stm32f7xx_it.c **** }
 545              		.loc 1 354 1 is_stmt 0 view .LVU62
 546 0008 08BD     		pop	{r3, pc}
 547              	.L58:
 548 000a 00BF     		.align	2
 549              	.L57:
 550 000c 00000000 		.word	htim8
 551              		.cfi_endproc
 552              	.LFE162:
 554              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 555              		.align	1
 556              		.global	TIM6_DAC_IRQHandler
 557              		.syntax unified
 558              		.thumb
 559              		.thumb_func
 561              	TIM6_DAC_IRQHandler:
 562              	.LFB163:
 355:Core/Src/stm32f7xx_it.c **** 
 356:Core/Src/stm32f7xx_it.c **** /**
 357:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
 358:Core/Src/stm32f7xx_it.c ****   */
 359:Core/Src/stm32f7xx_it.c **** void TIM6_DAC_IRQHandler(void)
 360:Core/Src/stm32f7xx_it.c **** {
 563              		.loc 1 360 1 is_stmt 1 view -0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 0
 566              		@ frame_needed = 0, uses_anonymous_args = 0
 567 0000 08B5     		push	{r3, lr}
 568              		.cfi_def_cfa_offset 8
 569              		.cfi_offset 3, -8
 570              		.cfi_offset 14, -4
 361:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
 362:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 0 */
 363:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim6);
 571              		.loc 1 363 3 view .LVU64
 572 0002 0248     		ldr	r0, .L61
 573 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 574              	.LVL16:
 364:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
 365:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 1 */
 366:Core/Src/stm32f7xx_it.c **** }
 575              		.loc 1 366 1 is_stmt 0 view .LVU65
 576 0008 08BD     		pop	{r3, pc}
 577              	.L62:
 578 000a 00BF     		.align	2
 579              	.L61:
 580 000c 00000000 		.word	htim6
ARM GAS  /tmp/cc8EUjVO.s 			page 17


 581              		.cfi_endproc
 582              	.LFE163:
 584              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 585              		.align	1
 586              		.global	TIM7_IRQHandler
 587              		.syntax unified
 588              		.thumb
 589              		.thumb_func
 591              	TIM7_IRQHandler:
 592              	.LFB164:
 367:Core/Src/stm32f7xx_it.c **** 
 368:Core/Src/stm32f7xx_it.c **** /**
 369:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM7 global interrupt.
 370:Core/Src/stm32f7xx_it.c ****   */
 371:Core/Src/stm32f7xx_it.c **** void TIM7_IRQHandler(void)
 372:Core/Src/stm32f7xx_it.c **** {
 593              		.loc 1 372 1 is_stmt 1 view -0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 0
 596              		@ frame_needed = 0, uses_anonymous_args = 0
 597 0000 08B5     		push	{r3, lr}
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 3, -8
 600              		.cfi_offset 14, -4
 373:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 0 */
 374:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM7_IRQn 0 */
 375:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim7);
 601              		.loc 1 375 3 view .LVU67
 602 0002 0248     		ldr	r0, .L65
 603 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 604              	.LVL17:
 376:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 1 */
 377:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM7_IRQn 1 */
 378:Core/Src/stm32f7xx_it.c **** }
 605              		.loc 1 378 1 is_stmt 0 view .LVU68
 606 0008 08BD     		pop	{r3, pc}
 607              	.L66:
 608 000a 00BF     		.align	2
 609              	.L65:
 610 000c 00000000 		.word	htim7
 611              		.cfi_endproc
 612              	.LFE164:
 614              		.section	.text.OTG_HS_IRQHandler,"ax",%progbits
 615              		.align	1
 616              		.global	OTG_HS_IRQHandler
 617              		.syntax unified
 618              		.thumb
 619              		.thumb_func
 621              	OTG_HS_IRQHandler:
 622              	.LFB165:
 379:Core/Src/stm32f7xx_it.c **** 
 380:Core/Src/stm32f7xx_it.c **** /**
 381:Core/Src/stm32f7xx_it.c ****   * @brief This function handles USB On The Go HS global interrupt.
 382:Core/Src/stm32f7xx_it.c ****   */
 383:Core/Src/stm32f7xx_it.c **** void OTG_HS_IRQHandler(void)
 384:Core/Src/stm32f7xx_it.c **** {
 623              		.loc 1 384 1 is_stmt 1 view -0
ARM GAS  /tmp/cc8EUjVO.s 			page 18


 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627 0000 08B5     		push	{r3, lr}
 628              		.cfi_def_cfa_offset 8
 629              		.cfi_offset 3, -8
 630              		.cfi_offset 14, -4
 385:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN OTG_HS_IRQn 0 */
 386:Core/Src/stm32f7xx_it.c **** 
 387:Core/Src/stm32f7xx_it.c ****   /* USER CODE END OTG_HS_IRQn 0 */
 388:Core/Src/stm32f7xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 631              		.loc 1 388 3 view .LVU70
 632 0002 0248     		ldr	r0, .L69
 633 0004 FFF7FEFF 		bl	HAL_PCD_IRQHandler
 634              	.LVL18:
 389:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN OTG_HS_IRQn 1 */
 390:Core/Src/stm32f7xx_it.c **** 
 391:Core/Src/stm32f7xx_it.c ****   /* USER CODE END OTG_HS_IRQn 1 */
 392:Core/Src/stm32f7xx_it.c **** }
 635              		.loc 1 392 1 is_stmt 0 view .LVU71
 636 0008 08BD     		pop	{r3, pc}
 637              	.L70:
 638 000a 00BF     		.align	2
 639              	.L69:
 640 000c 00000000 		.word	hpcd_USB_OTG_HS
 641              		.cfi_endproc
 642              	.LFE165:
 644              		.text
 645              	.Letext0:
 646              		.file 2 "/home/qrsnap/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-no
 647              		.file 3 "/home/qrsnap/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-no
 648              		.file 4 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f723xx.h"
 649              		.file 5 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 650              		.file 6 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 651              		.file 7 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 652              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_i2c.h"
 653              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 654              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 655              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_usb.h"
 656              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pcd.h"
 657              		.file 13 "Core/Inc/spi.h"
 658              		.file 14 "Core/Inc/nyan_os.h"
 659              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/cc8EUjVO.s 			page 19


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_it.c
     /tmp/cc8EUjVO.s:21     .text.NMI_Handler:00000000 $t
     /tmp/cc8EUjVO.s:27     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/cc8EUjVO.s:44     .text.HardFault_Handler:00000000 $t
     /tmp/cc8EUjVO.s:50     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/cc8EUjVO.s:99     .text.HardFault_Handler:00000038 $d
     /tmp/cc8EUjVO.s:104    .text.MemManage_Handler:00000000 $t
     /tmp/cc8EUjVO.s:110    .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/cc8EUjVO.s:127    .text.BusFault_Handler:00000000 $t
     /tmp/cc8EUjVO.s:133    .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/cc8EUjVO.s:150    .text.UsageFault_Handler:00000000 $t
     /tmp/cc8EUjVO.s:156    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/cc8EUjVO.s:173    .text.SVC_Handler:00000000 $t
     /tmp/cc8EUjVO.s:179    .text.SVC_Handler:00000000 SVC_Handler
     /tmp/cc8EUjVO.s:192    .text.DebugMon_Handler:00000000 $t
     /tmp/cc8EUjVO.s:198    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/cc8EUjVO.s:211    .text.PendSV_Handler:00000000 $t
     /tmp/cc8EUjVO.s:217    .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/cc8EUjVO.s:230    .text.SysTick_Handler:00000000 $t
     /tmp/cc8EUjVO.s:236    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/cc8EUjVO.s:255    .text.DMA1_Stream0_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:261    .text.DMA1_Stream0_IRQHandler:00000000 DMA1_Stream0_IRQHandler
     /tmp/cc8EUjVO.s:280    .text.DMA1_Stream0_IRQHandler:0000000c $d
     /tmp/cc8EUjVO.s:285    .text.DMA1_Stream3_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:291    .text.DMA1_Stream3_IRQHandler:00000000 DMA1_Stream3_IRQHandler
     /tmp/cc8EUjVO.s:310    .text.DMA1_Stream3_IRQHandler:0000000c $d
     /tmp/cc8EUjVO.s:315    .text.DMA1_Stream4_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:321    .text.DMA1_Stream4_IRQHandler:00000000 DMA1_Stream4_IRQHandler
     /tmp/cc8EUjVO.s:340    .text.DMA1_Stream4_IRQHandler:0000000c $d
     /tmp/cc8EUjVO.s:345    .text.DMA1_Stream6_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:351    .text.DMA1_Stream6_IRQHandler:00000000 DMA1_Stream6_IRQHandler
     /tmp/cc8EUjVO.s:370    .text.DMA1_Stream6_IRQHandler:0000000c $d
     /tmp/cc8EUjVO.s:375    .text.TIM1_UP_TIM10_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:381    .text.TIM1_UP_TIM10_IRQHandler:00000000 TIM1_UP_TIM10_IRQHandler
     /tmp/cc8EUjVO.s:400    .text.TIM1_UP_TIM10_IRQHandler:0000000c $d
     /tmp/cc8EUjVO.s:405    .text.TIM1_CC_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:411    .text.TIM1_CC_IRQHandler:00000000 TIM1_CC_IRQHandler
     /tmp/cc8EUjVO.s:430    .text.TIM1_CC_IRQHandler:0000000c $d
     /tmp/cc8EUjVO.s:435    .text.I2C1_EV_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:441    .text.I2C1_EV_IRQHandler:00000000 I2C1_EV_IRQHandler
     /tmp/cc8EUjVO.s:460    .text.I2C1_EV_IRQHandler:0000000c $d
     /tmp/cc8EUjVO.s:465    .text.I2C1_ER_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:471    .text.I2C1_ER_IRQHandler:00000000 I2C1_ER_IRQHandler
     /tmp/cc8EUjVO.s:490    .text.I2C1_ER_IRQHandler:0000000c $d
     /tmp/cc8EUjVO.s:495    .text.SPI2_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:501    .text.SPI2_IRQHandler:00000000 SPI2_IRQHandler
     /tmp/cc8EUjVO.s:520    .text.SPI2_IRQHandler:0000000c $d
     /tmp/cc8EUjVO.s:525    .text.TIM8_CC_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:531    .text.TIM8_CC_IRQHandler:00000000 TIM8_CC_IRQHandler
     /tmp/cc8EUjVO.s:550    .text.TIM8_CC_IRQHandler:0000000c $d
     /tmp/cc8EUjVO.s:555    .text.TIM6_DAC_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:561    .text.TIM6_DAC_IRQHandler:00000000 TIM6_DAC_IRQHandler
     /tmp/cc8EUjVO.s:580    .text.TIM6_DAC_IRQHandler:0000000c $d
     /tmp/cc8EUjVO.s:585    .text.TIM7_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:591    .text.TIM7_IRQHandler:00000000 TIM7_IRQHandler
     /tmp/cc8EUjVO.s:610    .text.TIM7_IRQHandler:0000000c $d
ARM GAS  /tmp/cc8EUjVO.s 			page 20


     /tmp/cc8EUjVO.s:615    .text.OTG_HS_IRQHandler:00000000 $t
     /tmp/cc8EUjVO.s:621    .text.OTG_HS_IRQHandler:00000000 OTG_HS_IRQHandler
     /tmp/cc8EUjVO.s:640    .text.OTG_HS_IRQHandler:0000000c $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_IncTick
HAL_DMA_IRQHandler
hdma_i2c1_rx
hdma_spi2_rx
hdma_spi2_tx
hdma_i2c1_tx
HAL_TIM_IRQHandler
htim1
HAL_I2C_EV_IRQHandler
hi2c1
HAL_I2C_ER_IRQHandler
HAL_SPI_IRQHandler
hspi2
htim8
htim6
htim7
HAL_PCD_IRQHandler
hpcd_USB_OTG_HS
